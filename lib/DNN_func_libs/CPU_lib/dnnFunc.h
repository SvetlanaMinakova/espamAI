//File automatic generated by espamAI

#ifndef dnnFunc_H_
#define dnnFunc_H_


#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector>
#include <map>

class dnnFunc {
public:
	dnnFunc();
	virtual ~dnnFunc();

    static void execute_dense_block (std::string function,float * input,float* weights,float* output,float *bias, std::map<std::string,int>* int_params_ptr );
    static void execute_conv (float *input, float *weights, float *output,float *bias, const int* pads, std::map<std::string,int>* int_params_ptr, int core_id);
    static void execute_pool (std::string function, float *input, float *output,float *bias, const int* pads, std::map<std::string,int>* int_params_ptr);


    static void execute_addconst (float* input, float* weights, float* output, int input_len);
    static void execute_avgpool(float *input, float *output, float* bias, int channels, int input_h,
    		int input_w,int output_d, int output_h,int output_w, int k_h, int k_w, int stride);
    static void execute_concat (float* input, float* weights, float* output, std::map<std::string,int>* int_params_ptr );
  //  static void execute_gemm (float* input, float* weights, float* output, std::map<std::string,int>* int_params_ptr );
    static void execute_lrn (float* input, float* output, int inp_len, int neurons, int nsize);
    static void execute_maxpool(float *input, float *output, float* bias, int channels, int input_h,
   		 int input_w,int output_d, int output_h,int output_w, int k_h, int k_w, int stride);
  //  static void execute_matmul (float* input, float* weights, float* output, std::map<std::string,int>* int_params_ptr );
    static void execute_relu (float* input, float* output, int input_len);
    static void execute_reshape (float* input, float* weights, float* output, std::map<std::string,int>* int_params_ptr );
    static void execute_sigm (float* input, float* output, int input_len);
    static void execute_thn (float* input, float* output, int input_len);
    static void execute_softmax( float *non_activated_stages, float *output, int len);
    static void softmax(float *input, int n, float *output);

	static void convolution_2d_inp_gpu(float* input, float* kernel, float* output, int input_h, int input_w,
			int output_h,int output_w, int k_h, int k_w, int stride);

	static void convolution_3d_inp_gpu(float* input, float* kernel, float* output, int channels, int input_h, int input_w,
				int output_h,int output_w, int k_h, int k_w, int stride);

static void convolution_2d_inp_cpu(float* input, float* kernel, float* output, int input_h, int input_w,
			int output_h,int output_w, int k_h, int k_w, int stride);

	static void convolution_3d_inp_cpu(float* input, float* kernel, float* output,float*bias, int channels, int input_h, int input_w,
				 int output_d, int output_h,int output_w, int k_h, int k_w, int stride);

	static void convolution_3d_inp_cpu_same(float* input, float* kernel, float* output,float*bias, int channels, int input_h, int input_w,
				 int output_d, int output_h,int output_w, int k_h, int k_w, int stride);
	static void convolution_3d_inp_cpu_same_no_border(float *input, float *weights, float *output, float* bias, int channels, int input_h,
	 int input_w,int output_d, int output_h,int output_w, int k_h, int k_w, int stride);



    static void transpose(float *input, int inp_h, int inp_w);
    static void envide_input(float *inp, float* envided, int inp_d, int inp_h, int inp_w, int h_pad, int w_pad);

	static float get_softmax_summ(float *non_activated_stages, int input_len);
	static void init_zeros(float *matrix, int h, int w);
	static void init_zeros(float *matrix, int d, int h, int w);
	static void init_output(float *arr, float* bias, int d, int h, int w);
	static void weight_and_sum(float* input, float* weights, float* result, int input_len);
	static void execute_matmul(float* input, float* weights, float* result, int input_len, int output_len);
	static void execute_gemm(float* input, float* weights, float* result, float* bias ,int input_len, int output_len);
};
#endif /* dnnFunc_H_ */

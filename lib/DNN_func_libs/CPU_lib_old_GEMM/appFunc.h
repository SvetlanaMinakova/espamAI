// File automatically generated by ESPAM

#ifndef appFunc_H
#define appFunc_H
#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector>
#include "types.h"

class appFunc {
public:
    appFunc();
    virtual ~appFunc();
  // transpose matrix, data type: float
  static void transpose(float *input, int inp_h, int inp_w);

  // Execution function communication moc
    static void communication_moc(float* input, float* output, int inp_len, int outp_len);
  // Execution function primitive
    static void execute (std::string function);
    static void execute (std::string function,std::map<std::string,float*>* tensor_params_ptr, std::map<std::string,int>* int_params_ptr );
    static void execute (std::string function,float* input, float* weights, float* output,float* bias, std::map<std::string,int>* int_params_ptr );

  //Data shift function (for shifting overlapping data in I/O arrays)
    // line copy function, type: float
    static void cpy_2D_data_line(const int &data_w, float *src,float *dst, const int &line_id);

    // matrix shift functions, type: float
    static void shift_2D(const int &h, const int &w, float *x, const int &stride);
    static void shift_3D(const int &d, const int &h, const int &w, float *x, const int &stride);

    // matrix print functions, type: float
    static void print_2D (const int &h, const int &w, float *x);
    static void print_3D (const int &d, const int &h, const int &w, float *x);
    static void show_val(float *x, int xlen, int num);
    static fifo_buf* get_buf_by_src (std::string name, std::vector<fifo_buf>& fifos);
    static fifo_buf* get_buf_by_dst (std::string name, std::vector<fifo_buf>& fifos);
};
#endif // appFunc_H

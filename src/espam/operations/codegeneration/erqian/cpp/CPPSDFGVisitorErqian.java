package espam.operations.codegeneration.erqian.cpp;

import espam.datamodel.graph.csdf.CSDFNode;
import espam.datamodel.graph.csdf.CSDFPort;
import espam.datamodel.graph.csdf.datasctructures.MemoryUnit;
import espam.operations.codegeneration.sesame.cpp.CPPSDFGVisitor;

public class CPPSDFGVisitorErqian extends CPPSDFGVisitor {
    ///////////////////////////////////////////////////////////////////
    ////                         public methods                     ///

    /**
     * Write common beginning for all generated nodes, contains:
     *  - definition of header
     *  - definition of standard libraries
     *  - definition of namespace
     * @param className name of the .cpp class
     */
    @Override
    protected void _writeCommonCppBeginning(String className){
        _printStream.println("// File automatically generated by ESPAM");
        _printStream.println("");
         /** TODO: should I define any libraries in here?? Or they will
          * TODO be copied from the graphName.so file?*/
        _printStream.println("#include \""+ className + ".h\"");
        _printStream.println("#include <stdlib.h>");
        _printStream.println("#include <iostream>");
        _printStream.println("#include \"fifo.h\"");
        _printStream.println("using namespace std;");
        _printStream.println("");
    }

    /**
     * Write constructor and destructor .cpp definitions
     * @param className name of the .cpp class
     */
    @Override
    protected void  _writeCppConstructorAndDestructor(String className, String baseClassName){
        _printStream.println(className + "::" + className + "() {}");
        _printStream.println(className + "::~" + className + "() {}");
        _printStream.println("");
    }

     /**
     * print reading template
     * @param port SDF input port
     */
     @Override
      public void printReadTemplate(CSDFPort port) {
        String arrayName = port.getAssignedMemoryName();
        if(port.getStartTokens()==null) {
            printOperationTemplate(port, "read",arrayName);
            return;
        }
        String shiftDesc = port.getName() + "_shift";
        printOperationShiftedTemplate(port,"read",arrayName,shiftDesc);
    }

     /**
     * print reading/writing template for port,
     * taking into account only end border limitations
     * R/W primitive parameters:
     * 1. fifo: reference on destination array (name of CSDF node input port array) or FIFO
     * 2. memobj_cpu : reference on source array (default value, stored in header)
     * 3. len - number of tokens to be transferred
     * 4. fifo_size - total fifo size (const value, stored in header)
      * */
     @Override
    public void printOperationTemplate(CSDFPort port,String operation, String arrayName){
       if(port==null || arrayName==null)
           return;
        int dataDimensionality = port.getMemoryDim();
        String portName = port.getName();

        _printStream.println(" ");
        _printStream.println(_prefix + "// " + operation + " to " + arrayName);
        _printStream.println(_prefix + operation + _primitivePostfix +"(" + arrayName + ", " +
                "memobj_cpu, " + portName + "_tokens, " + portName + "_fifo_size);");

    }


    ///////////////////////////////////////////////////////////////////
    ///                private variables                           ///
    /** name of the read primitive function*/
    private static String _readPrimitiveFunc = "readSWF_CPU";


    /** name of the write primitive function*/
    private static String _writePrimitiveFunc = "writeSWF_CPU";

    /** primitive postfix*/
    private static String _primitivePostfix = "SWF_CPU";

    /** TODO shift primitive???*/

}

/*******************************************************************\

The ESPAM Software Tool 
Copyright (c) 2004-2008 Leiden University (LERC group at LIACS).
All rights reserved.

The use and distribution terms for this software are covered by the 
Common Public License 1.0 (http://opensource.org/licenses/cpl1.0.txt)
which can be found in the file LICENSE at the root of this distribution.
By using this software in any fashion, you are agreeing to be bound by 
the terms of this license.

You must not remove this notice, or any other, from this software.

\*******************************************************************/

package espam.visitor.hdpc;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.Vector;

import espam.datamodel.graph.adg.ADGParameter;
import espam.datamodel.graph.adg.ADGEdge;
import espam.datamodel.graph.adg.ADGFunction;
import espam.datamodel.graph.adg.ADGNode;

import espam.datamodel.pn.cdpn.CDChannel;
import espam.datamodel.pn.cdpn.CDProcessNetwork;
import espam.datamodel.pn.cdpn.CDProcess;
import espam.datamodel.pn.cdpn.CDGate;

import espam.datamodel.EspamException;

import espam.main.UserInterface;
import espam.visitor.CDPNVisitor;

import espam.visitor.xps.Copier;

//////////////////////////////////////////////////////////////////////////
////HdpcNetworkVisitor

/**
 *  This class ...
 *
 * @author  Hristo Nikolov, Todor Stefanov
 * @version  $Id: HdpcNetworkVisitor.java,v 1.3 2002/06/12 18:28:59 sjain
 *      Exp $
 */

public class HdpcNetworkVisitor extends CDPNVisitor {

    /**
     *  Constructor for the HdpcNetworkVisitor object
     *
     * @param  printStream Description of the Parameter
     */
    public HdpcNetworkVisitor( CDProcessNetwork x ) {
        try {
		_printStream = _openMainCppFile( x.getName() + "_KPN", "cpp");

        	_printStream.println("// File automatically generated by ESPAM");

                //copy the hdpc library
    	        UserInterface ui = UserInterface.getInstance();
    	        String codeDir;
    	        if (ui.getOutputFileName() == "") {
    		    codeDir = ui.getBasePath() + "/" + ui.getFileName() + "_hdpc/";
    	        } else {
    		    codeDir = ui.getBasePath() + "/" + ui.getOutputFileName() + "_hdpc/";
    	        }

		String temp = ui.getHdpcLibPath();
                File f = new File(ui.getHdpcLibPath());
                File t = new File(codeDir);
                Copier.copy(f, t, 1, true);

	} catch( EspamException e ) {
		System.out.println(" ESPAM Message: " + e.getMessage());
		e.printStackTrace(System.out);
	} catch( Exception e ) {
            	System.out.println("Error: " + e.getMessage());
            	System.out.println("Can not create the main .cpp project file");
        }


    }

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                     ///

    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDProcessNetwork x ) {

// Generating the main cpp file
        _pn = x;
	_printStream.println("#include <iostream>");
	_printStream.println(""); 
	_printStream.println("//#define HDPC_DEBUG"); 
	_printStream.println(""); 
	_printStream.println("// include main hdpc header file"); 
	_printStream.println("#include <hdpc/process.hpp>");
	_printStream.println("#include <hdpc/timer.hpp>");
	_printStream.println(""); 
	_printStream.println("// include all needed platforms (cpu, disk, cuda, fpga, etc.)"); 
	_printStream.println("#include <hdpc/platforms/cpu.h>");
	_printStream.println("//#include <hdpc/platforms/cuda.h>");
	_printStream.println("//#include <hdpc/platforms/disk.h>");
	_printStream.println(""); 
	_printStream.println("// include all needed types of channel locking (lock_free, spin, signal, spin_acquire, etc.)"); 
	_printStream.println("#include <hdpc/channels/lock_free.h> ");
	_printStream.println("#include <hdpc/channels/sync_free.h> ");
	_printStream.println("//#include <hdpc/channels/spin_wait.h> ");
	_printStream.println("//#include <hdpc/channels/signal_wait.h> ");
	_printStream.println("//#include <hdpc/channels/spin_acquire_wait.h> ");
	_printStream.println(""); 
	_printStream.println("#include \"aux_func.h\"");
        _printStream.println("");

// Print the processes
	CDProcess process;

        Iterator i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
	    Vector inGates  = process.getInGates();
	    Vector outGates = process.getOutGates();
	    _printStream.println(_prefix + 
		"typedef hdpc::Process<CPU, " + inGates.size() + ", " + outGates.size() + "> "  + process.getName() + "_t;");
        }
        _printStream.println("");

// include processes' execute implementation
        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
            _printStream.println("#include \"" + process.getName() + ".hpp\"");
        }

	_prefixInc();
	_printStream.println("");
	_printStream.println("int main() {");
	_printStream.println("");

	_printStream.println(_prefix + "hdpc::Timer<> t;");
	_printStream.println(_prefix + "t.start_timer();");
	_printStream.println("");

	_printStream.println("// create platforms (disk, cpu, etc.)");
//	_printStream.println(_prefix + "hdpc::platform::CPU cpu1;");
        String csl=_prefix + "CPU "; 
	int totalProcesses = x.getProcessList().size();
        for(int index=1; index <= totalProcesses; index++) {
            csl += "cpu" + index + ", ";
        }
        _printStream.println(csl.substring(0, (csl.length() - 2)) + ";");
	_printStream.println("");

// Set names
	int index = 1;
        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
            Iterator n = process.getAdgNodeList().iterator();
  	    _printStream.print(_prefix +  "cpu" + index++ + ".set_name(\"");
            while( n.hasNext() ) {
                ADGNode node = (ADGNode) n.next();
                ADGFunction function = (ADGFunction) node.getFunction();
  	        _printStream.print(function.getName() + " ");
	    }
            _printStream.println( "\");");
        }
	_printStream.println("");

// Create processes
	_printStream.println("// create processes");
        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
	    _printStream.println( _prefix + process.getName() + "_t " + "p_" + process.getName() + ";" );
        }
        _printStream.println("");

// Print the KPN topology here
	_printStream.println("// connect together - the KPN topology");
	_printStream.println("// comment the line below, to attach outputs");
	_printStream.println("/*");
        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
	    _printConnections( process, true );
	}
	_printStream.println("/*/");

        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
	    _printConnections( process, false );
	}
	_printStream.println("//*/");

	_printStream.println("");

// Start the threads
	_printStream.println("// run");
	Vector processList = x.getProcessList();
//	_printStream.println(_prefix + "HANDLE h[" + processList.size() + "];");
	_printStream.println(_prefix + "boost::thread_group tg;");
        _printStream.println("");

        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
	    _printStream.println( _prefix + "p_" + process.getName() + "_function " + process.getName() + ";" );
        }
        _printStream.println("");

	int h=0;
        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
	    _printStream.println(_prefix + 
//		"h[" + h +  "] = p_" + process.getName() + ".start( CORES, cpu" + ++h + ", " + process.getName() + " );");
                "tg.add_thread(p_" + process.getName() + ".start(CORES, cpu" + ++h + ", " + process.getName() + "));");
            }
	
	_printStream.println("");
	_printStream.println("// wait to finish");
//	_printStream.println(_prefix + "WaitForMultipleObjects( lengthof(h), h, true, INFINITE );");
	_printStream.println(_prefix + "tg.join_all();");
	_printStream.println("");
	_printStream.println(_prefix + "t.end_timer();");
	_printStream.println(_prefix + "printf(\"\\nTime Elapsed: %.3f\\n\", t.elapsed_time());");
	_printStream.println("");
	_printStream.println(_prefix + "return 0;");

        _printStream.println("};");
// end main()

        HdpcProcessVisitor pt = new HdpcProcessVisitor();
        x.accept( pt );

        _writeVCProjectFile();
        _writeMakefile(x);
    }

    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDChannel x ) {
    }

    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDProcess x ) {
    }


    ///////////////////////////////////////////////////////////////////
    ////                         private methods                   ////

    /**
     *  Description of the Method
     *
     * @param  x Description of the Parameter
     */
    private void _printConnections( CDProcess x, boolean attach_outputs ) {
        String ed;
        String csl = "";
        Iterator i;
        CDGate gate;

        i = x.getOutGates().iterator();
        while( i.hasNext() ) {
            gate = (CDGate) i.next();

	    CDChannel chann = (CDChannel)gate.getChannel();
	    String p_name = chann.getToGate().getProcess().getName();
	    int chSize = ( (ADGEdge) chann.getAdgEdgeList().get(0) ).getSize();

// Espam name convention for the gates: IG_1, OG_2, ... HDPC requires port numbers starting from 0. 
// This is what we 'convert' below
	    StringBuffer fromStr = new StringBuffer(gate.getName());
	    fromStr.delete(0,3);
	    String fromPort = fromStr.toString();
            int intFromPort = Integer.parseInt(fromPort);
	    intFromPort--;

	    StringBuffer toStr = new StringBuffer(chann.getToGate().getName());
	    toStr.delete(0,3);
	    String toPort = toStr.toString();
            int intToPort = Integer.parseInt(toPort);
	    intToPort--;

	    String syncType = "LOCK_FREE";
	    // Check whether a channel is a 'self-loop' in order to use lighter communication primitive
	    if( chann.getFromGate().getProcess().getName().equals( chann.getToGate().getProcess().getName() ) ) {
		syncType = "SYNC_FREE";
	    }

	    if( attach_outputs ) {
	       _printStream.println(_prefix + "p_" + x.getName() + ".attachoutput<" + syncType + ", t" + chann.getName() +
	       ">( " + intFromPort + ", p_" + p_name + ".getInPort(" + intToPort + "), " + chSize + " );");
	    } else {
	       _printStream.println(_prefix + "p_" + p_name + ".attachinput<" + syncType + ", t" + chann.getName() +
	       ">( " + intToPort + ", p_" + x.getName() + ".getOutPort(" + intFromPort + "), " + chSize + " );"); 
	    }
        }
    }

    /**
     */
    private void _writeVCProjectFile() {
        try {
            PrintStream cf = _openVCProjectFile();

cf.println("<?xml version=\"1.0\" encoding=\"Windows-1252\"?>");
cf.println("<VisualStudioProject");
	cf.println("\tProjectType=\"Visual C++\"");
	cf.println("\tVersion=\"9.00\"");

	cf.println("\tName=\"" + _pn.getName() + "\"");

	cf.println("\tProjectGUID=\"{9BE3F378-DC0E-4A5B-8478-8343A359F319}\"");

	cf.println("\tRootNamespace=\"" + _pn.getName() + "\"");

	cf.println("\tKeyword=\"Win32Proj\"");
	cf.println("\tTargetFrameworkVersion=\"196613\"");
	cf.println("\t>");

	cf.println("\t<Platforms>");
		cf.println("\t\t<Platform Name=\"Win32\" />");
		cf.println("\t\t<Platform Name=\"x64\"   />");
	cf.println("\t</Platforms>");
	cf.println("");
	cf.println("\t<ToolFiles> </ToolFiles>");
	cf.println("");
	cf.println("\t<Configurations>");
		cf.println("\t\t<Configuration");
			cf.println("\t\t\tName=\"Debug|Win32\"");
			cf.println("\t\t\tOutputDirectory=\"$(SolutionDir)$(ConfigurationName)\"");
			cf.println("\t\t\tIntermediateDirectory=\"$(ConfigurationName)\"");
			cf.println("\t\t\tConfigurationType=\"1\"");
			cf.println("\t\t\tCharacterSet=\"1\"");
			cf.println("\t\t\t>");
			cf.println("\t\t\t<Tool Name=\"VCPreBuildEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCCustomBuildTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXMLDataGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCWebServiceProxyGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCMIDLTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCCLCompilerTool\"");
				cf.println("\t\t\t\tOptimization=\"0\"");
				cf.println("\t\t\t\tPreprocessorDefinitions=\"WIN32;_DEBUG;_CONSOLE\"");
				cf.println("\t\t\t\tAdditionalIncludeDirectories=\"$(ProjectDir)\"");
				cf.println("\t\t\t\tMinimalRebuild=\"true\"");
				cf.println("\t\t\t\tBasicRuntimeChecks=\"3\"");
				cf.println("\t\t\t\tRuntimeLibrary=\"3\"");
				cf.println("\t\t\t\tUsePrecompiledHeader=\"0\"");
				cf.println("\t\t\t\tWarningLevel=\"3\"");
				cf.println("\t\t\t\tDebugInformationFormat=\"4\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCManagedResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPreLinkEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCLinkerTool\"");
				cf.println("\t\t\t\tLinkIncremental=\"2\"");
				cf.println("\t\t\t\tGenerateDebugInformation=\"true\"");
				cf.println("\t\t\t\tSubSystem=\"1\"");
				cf.println("\t\t\t\tTargetMachine=\"1\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCALinkTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCManifestTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXDCMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCBscMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCFxCopTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCAppVerifierTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPostBuildEventTool\" />");
		cf.println("\t\t</Configuration>");
		cf.println("\t\t<Configuration");
			cf.println("\t\t\tName=\"Release|Win32\"");
			cf.println("\t\t\tOutputDirectory=\"$(SolutionDir)$(ConfigurationName)\"");
			cf.println("\t\t\tIntermediateDirectory=\"$(ConfigurationName)\"");
			cf.println("\t\t\tConfigurationType=\"1\"");
			cf.println("\t\t\tCharacterSet=\"1\"");
			cf.println("\t\t\tWholeProgramOptimization=\"1\"");
			cf.println("\t\t\t>");
			cf.println("\t\t\t<Tool Name=\"VCPreBuildEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCCustomBuildTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXMLDataGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCWebServiceProxyGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCMIDLTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCCLCompilerTool\"");
				cf.println("\t\t\t\tOptimization=\"2\"");
				cf.println("\t\t\t\tEnableIntrinsicFunctions=\"true\"");
				cf.println("\t\t\t\tPreprocessorDefinitions=\"WIN32;NDEBUG;_CONSOLE\"");
				cf.println("\t\t\t\tAdditionalIncludeDirectories=\"$(ProjectDir)\"");
				cf.println("\t\t\t\tRuntimeLibrary=\"2\"");
				cf.println("\t\t\t\tEnableFunctionLevelLinking=\"true\"");
				cf.println("\t\t\t\tUsePrecompiledHeader=\"0\"");
				cf.println("\t\t\t\tWarningLevel=\"3\"");
				cf.println("\t\t\t\tDebugInformationFormat=\"3\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCManagedResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPreLinkEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCLinkerTool\" LinkIncremental=\"1\"");
				cf.println("\t\t\t\tGenerateDebugInformation=\"true\"");
				cf.println("\t\t\t\tSubSystem=\"1\"");
				cf.println("\t\t\t\tOptimizeReferences=\"2\"");
				cf.println("\t\t\t\tEnableCOMDATFolding=\"2\"");
				cf.println("\t\t\t\tTargetMachine=\"1\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCALinkTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCManifestTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXDCMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCBscMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCFxCopTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCAppVerifierTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPostBuildEventTool\""); 
			cf.println("\t\t\t/>");
		cf.println("\t\t</Configuration>");
		cf.println("\t\t<Configuration");
			cf.println("\t\t\tName=\"Debug|x64\"");
			cf.println("\t\t\tOutputDirectory=\"$(SolutionDir)$(PlatformName)\\$(ConfigurationName)\"");
			cf.println("\t\t\tIntermediateDirectory=\"$(PlatformName)\\$(ConfigurationName)\"");
			cf.println("\t\t\tConfigurationType=\"1\"");
			cf.println("\t\t\tCharacterSet=\"1\"");
			cf.println("\t\t\t>");
			cf.println("\t\t\t<Tool Name=\"VCPreBuildEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCCustomBuildTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXMLDataGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCWebServiceProxyGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCMIDLTool\"");
				cf.println("\t\t\t\tTargetEnvironment=\"3\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCCLCompilerTool\"");
				cf.println("\t\t\t\tOptimization=\"0\"");
				cf.println("\t\t\t\tPreprocessorDefinitions=\"WIN32;_DEBUG;_CONSOLE\"");
				cf.println("\t\t\t\tAdditionalIncludeDirectories=\"$(ProjectDir)\"");
				cf.println("\t\t\t\tMinimalRebuild=\"true\"");
				cf.println("\t\t\t\tBasicRuntimeChecks=\"3\"");
				cf.println("\t\t\t\tRuntimeLibrary=\"3\"");
				cf.println("\t\t\t\tUsePrecompiledHeader=\"0\"");
				cf.println("\t\t\t\tWarningLevel=\"3\"");
				cf.println("\t\t\t\tDebugInformationFormat=\"3\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCManagedResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPreLinkEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCLinkerTool\"");
				cf.println("\t\t\t\tLinkIncremental=\"2\"");
				cf.println("\t\t\t\tGenerateDebugInformation=\"true\"");
				cf.println("\t\t\t\tSubSystem=\"1\"");
				cf.println("\t\t\t\tTargetMachine=\"17\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCALinkTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCManifestTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXDCMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCBscMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCFxCopTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCAppVerifierTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPostBuildEventTool\" />");
		cf.println("\t\t</Configuration>");
		cf.println("\t\t<Configuration");
			cf.println("\t\t\tName=\"Release|x64\"");
			cf.println("\t\t\tOutputDirectory=\"$(SolutionDir)$(PlatformName)\\$(ConfigurationName)\"");
			cf.println("\t\t\tIntermediateDirectory=\"$(PlatformName)\\$(ConfigurationName)\"");
			cf.println("\t\t\tConfigurationType=\"1\"");
			cf.println("\t\t\tCharacterSet=\"1\"");
			cf.println("\t\t\tWholeProgramOptimization=\"1\"");
			cf.println("\t\t\t>");
			cf.println("\t\t\t<Tool	Name=\"VCPreBuildEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCCustomBuildTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXMLDataGeneratorTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCWebServiceProxyGeneratorTool\" />");
			cf.println("\t\t\t<Tool	Name=\"VCMIDLTool\"");
				cf.println("\t\t\t\tTargetEnvironment=\"3\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCCLCompilerTool\"");
				cf.println("\t\t\t\tOptimization=\"2\"");
				cf.println("\t\t\t\tEnableIntrinsicFunctions=\"true\"");
				cf.println("\t\t\t\tPreprocessorDefinitions=\"WIN32;NDEBUG;_CONSOLE\"");
				cf.println("\t\t\t\tAdditionalIncludeDirectories=\"$(ProjectDir)\"");
				cf.println("\t\t\t\tRuntimeLibrary=\"2\"");
				cf.println("\t\t\t\tEnableFunctionLevelLinking=\"true\"");
				cf.println("\t\t\t\tUsePrecompiledHeader=\"0\"");
				cf.println("\t\t\t\tWarningLevel=\"3\"");
				cf.println("\t\t\t\tDebugInformationFormat=\"3\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCManagedResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCResourceCompilerTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPreLinkEventTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCLinkerTool\"");
				cf.println("\t\t\t\tLinkIncremental=\"1\"");
				cf.println("\t\t\t\tGenerateDebugInformation=\"true\"");
				cf.println("\t\t\t\tSubSystem=\"1\"");
				cf.println("\t\t\t\tOptimizeReferences=\"2\"");
				cf.println("\t\t\t\tEnableCOMDATFolding=\"2\"");
				cf.println("\t\t\t\tTargetMachine=\"17\"");
			cf.println("\t\t\t/>");
			cf.println("\t\t\t<Tool Name=\"VCALinkTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCManifestTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCXDCMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCBscMakeTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCFxCopTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCAppVerifierTool\" />");
			cf.println("\t\t\t<Tool Name=\"VCPostBuildEventTool\" />");
		cf.println("\t\t</Configuration>");
	cf.println("\t</Configurations>");
	cf.println("\t<References> </References>");
	cf.println("\t<Files>");
		cf.println("\t\t<Filter");
			cf.println("\t\t\tName=\"Source Files\"");
			cf.println("\t\t\tFilter=\"cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx\"");
			cf.println("\t\t\tUniqueIdentifier=\"{4FC737F1-C7A5-4376-A066-2A32D752A2FF}\"");
			cf.println("\t\t\t>");
			cf.println("\t\t\t<File RelativePath=\".\\src\\" + _pn.getName() + "_KPN.cpp\"> </File>");

			CDProcess process;
			String prName;
			Iterator i = _pn.getProcessList().iterator();
			while( i.hasNext() ) {
			process = (CDProcess) i.next();
			prName = process.getName();
			cf.println("\t\t\t<File RelativePath=\".\\src\\" + prName + ".hpp\"> </File>");
			}

		cf.println("\t\t</Filter>");
		cf.println("\t\t<Filter");
			cf.println("\t\t\tName=\"Header Files\"");
			cf.println("\t\t\tFilter=\"h;hpp;hxx;hm;inl;inc;xsd\"");
			cf.println("\t\t\tUniqueIdentifier=\"{93995380-89BD-4b04-88EB-625FBE52EBFB}\"");
			cf.println("\t\t\t>");
			cf.println("\t\t\t<File RelativePath=\".\\src\\aux_func.h\"> </File>");
		cf.println("\t\t</Filter>");
		cf.println("\t\t<Filter");
			cf.println("\t\t\tName=\"Resource Files\"");
			cf.println("\t\t\tFilter=\"rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav\"");
			cf.println("\t\t\tUniqueIdentifier=\"{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}\"");
			cf.println("\t\t\t>");
		cf.println("\t\t</Filter>");
		cf.println("\t\t<Filter Name=\"HDPC\" >");
			cf.println("\t\t\t<File RelativePath=\".\\hdpc\\debug.hpp\"> </File>");
			cf.println("\t\t\t<File RelativePath=\".\\hdpc\\process.hpp\"> </File>");
			cf.println("\t\t\t<File RelativePath=\".\\hdpc\\core_stuff.hpp\"> </File>");
			cf.println("\t\t\t<File RelativePath=\".\\hdpc\\timer.hpp\"> </File>");
			cf.println("\t\t\t<File RelativePath=\".\\hdpc\\timer.h\"> </File>");
			cf.println("\t\t\t<File RelativePath=\".\\hdpc\\stdafx.h\"> </File>");
			cf.println("\t\t\t<Filter Name=\"platforms\">");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\platforms\\platform.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\platforms\\disk.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\platforms\\cuda.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\platforms\\cpu.h\"> </File>");
			cf.println("\t\t\t</Filter>");
			cf.println("\t\t\t<Filter Name=\"channels\">");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\base.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\channel.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\lock_free.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\sync_free.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\semaphore_wait.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\spin_wait.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\acquire_wait.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\acquire_spin_wait.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\acquire_semaphore_wait.h\"> </File>");
				cf.println("\t\t\t\t<File RelativePath=\".\\hdpc\\channels\\acquire_lock_free.h\"> </File>");
			cf.println("\t\t\t</Filter>");
		cf.println("\t\t</Filter>");
	cf.println("\t</Files>");
	cf.println("\t<Globals> </Globals>");
cf.println("</VisualStudioProject>");

        }
        catch( Exception e ) {
            System.out.println("Error: " + e.getMessage());
            System.out.println("Cannt create the project (vcproj) file");
            System.out.println("Please supply your own file");
        }
    }


    /**
     *  Description of the Method
     *
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openVCProjectFile() 
             throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";
        // Create the directory indicated by the '-o' option. Otherwise
        // select the orignal filename. (REFACTOR)
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getFileName() + "_hdpc/" + ui.getFileName() + ".vcproj";
        } else {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getOutputFileName() + "_hdpc/" + ui.getOutputFileName() + ".vcproj";
        }

        System.out.println(" -- OPEN FILE: " + fullFileName);

        OutputStream file = null;
        file = new FileOutputStream( fullFileName );
        printStream = new PrintStream( file );
        return printStream;
    }


    /**
     *  Description of the Method
     *
     * @param  fileName Description of the Parameter
     * @param  extension Description of the Parameter
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openMainCppFile( String fileName, String extension )
            throws FileNotFoundException, EspamException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";

        String directory = null;
        // Create the directory if it does not exist. Create the
        // directory indicated by the '-o' option. Otherwise
        // select the orignal filename.
        if (ui.getOutputFileName() == "") {
            directory = ui.getBasePath() + "/" + ui.getFileName() + "_hdpc/src";
        } else {
            directory = ui.getBasePath() + "/" + ui.getOutputFileName() + "_hdpc/src";
        }

        File dir = new File(directory);
        if( !dir.exists() ) {
            if( !dir.mkdirs() ) {
                throw new EspamException(
                    "could not create "
                        + "directory '"
                        + dir.getPath()
                        + "'.");
            }
        }
        fullFileName = dir + "/" + fileName + "." + extension;

        System.out.println(" -- OPEN FILE: " + fullFileName);

        try {
            if( fileName.equals("") ) {
                printStream = new PrintStream(System.out);
            } else {
                OutputStream file = null;
                file = new FileOutputStream(fullFileName);
                printStream = new PrintStream(file);
            }
        } catch( SecurityException e ) {
            System.out.println(" Security Issue: " + e.getMessage());
        }

        return printStream;
    }


    private void _writeMakefile( CDProcessNetwork x) {
        try {
            PrintStream cf = _openMakefile();

            cf.println("# File automatically generated by ESPAM");
            cf.println("");
            cf.println("# Notes: 1) Add the BOOST path to LD_LIBRARY_PATH. For example:");
            cf.println("#           setenv LD_LIBRARY_PATH  ${LD_LIBRARY_PATH}:/local/BOOST/installed>/lib");
            cf.println("#        2) Change the path below (BOOST_DIR) to point where BOOST is installed");
            cf.println("#        3) Add additional .cpp files (if any)");
            cf.println("");

            cf.println("BOOST_DIR = $(HOME)/boost_1_36_0/lib");
            cf.println("");
            cf.println("FILE_NAME = " + x.getName() );
            cf.println("");
            cf.println("exe:"); 
            cf.println("	g++ ./src/${FILE_NAME}_KPN.cpp ./src/${FILE_NAME}_func.cpp -I. -I${BOOST_DIR}/include -L${BOOST_DIR}/lib -lboost_thread -o run_${FILE_NAME}");
            cf.println("");
            cf.println("clean:"); 
            cf.println("	rm -rf ./run_${FILE_NAME}");
            cf.println("");
        }
        catch( Exception e ) {
            System.out.println("Error: " + e.getMessage());
            System.out.println("Cannt create the Makefile");
            System.out.println("Please supply your own file");
        }
    }


    /**
     *  Description of the Method
     *
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openMakefile() 
             throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getFileName() + "_hdpc/Makefile";
        } else {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getOutputFileName() + "_hdpc/Makefile";
        }

        System.out.println(" -- OPEN FILE: " + fullFileName);

        OutputStream file = null;
        file = new FileOutputStream( fullFileName );
        printStream = new PrintStream( file );
        return printStream;
    }



    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    /**
     */
    private CDProcessNetwork _pn = null;
}


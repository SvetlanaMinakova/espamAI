/*******************************************************************\

The ESPAM Software Tool 
Copyright (c) 2004-2008 Leiden University (LERC group at LIACS).
All rights reserved.

The use and distribution terms for this software are covered by the 
Common Public License 1.0 (http://opensource.org/licenses/cpl1.0.txt)
which can be found in the file LICENSE at the root of this distribution.
By using this software in any fashion, you are agreeing to be bound by 
the terms of this license.

You must not remove this notice, or any other, from this software.

\*******************************************************************/

package espam.visitor.yapiPN;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Iterator;

import espam.datamodel.graph.adg.ADGParameter;
import espam.datamodel.graph.adg.ADGEdge;

import espam.datamodel.pn.cdpn.CDChannel;
import espam.datamodel.pn.cdpn.CDProcessNetwork;
import espam.datamodel.pn.cdpn.CDProcess;
import espam.datamodel.pn.cdpn.CDGate;

import espam.main.UserInterface;
import espam.visitor.CDPNVisitor;

//////////////////////////////////////////////////////////////////////////
////YapiNetworkVisitor

/**
 *  This class ...
 *
 * @author  Hristo Nikolov, Todor Stefanov
 * @version  $Id: YapiNetworkVisitor.java,v 1.3 2002/06/12 18:28:59 sjain
 *      Exp $
 */

public class YapiNetworkVisitor extends CDPNVisitor {

    /**
     *  Constructor for the YapiNetworkVisitor object
     *
     * @param  printStream Description of the Parameter
     */
    public YapiNetworkVisitor( PrintStream printStream ) {
        _printStream = printStream;
        _printStream.println("// File automatically generated by ESPAM");
    }

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                     ///

    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDProcessNetwork x ) {

        _pn = x;
        _printStream.println("#ifndef " + x.getName() + "_KPN_H");
        _printStream.println("#define " + x.getName() + "_KPN_H");
        _printStream.println("");
        _printStream.println("#include \"yapi.h\"");
        _printStream.println("");

        CDProcess process;

        Iterator i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
            _printStream.println("#include \"" + process.getName() + ".h\"");
        }

        _printStream.println("");
        _printStream.println
                ("class " + x.getName() + " : public ProcessNetwork {");
        _prefixInc();
        _printStream.println(_prefix + "private:");
        _prefixInc();
        _printStream.println(_prefix + "// Channels");

        CDChannel channel;

        i = x.getChannelList().iterator();
        while( i.hasNext() ) {
            channel = (CDChannel) i.next();
            channel.accept(this);
        }

        _printStream.println("");
        _printStream.println(_prefix + "// processes");

        i = x.getProcessList().iterator();
        while( i.hasNext() ) {
            process = (CDProcess) i.next();
            process.accept(this);
        }

        _printStream.println("");
        _prefixDec();
        _printConstructor();

        //  the type() function
        _printStream.println("");
        _prefixDec();
        _printStream.println(_prefix + "const char* type() const { " +
                "return \"" + x.getName() + "\"; };");

        _printStream.println("");
        _printStream.println("};");

        _printStream.println("");
        _printStream.println("#endif /* " + x.getName() + "_H */");

        YapiProcessVisitor pt = new YapiProcessVisitor();
        x.accept( pt );

        _writeMakeFile();
        _writeConfigFile();
        _writeSourceFile();
        _writeMainFile();
    }

    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDChannel x ) {

       _printStream.println(_prefix + "Fifo<t"+x.getName()+"> " + x.getName() + ";");
    }

    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDProcess x ) {

       _printStream.println(_prefix + x.getName() + " " + x.getName() + "_instance;");
    }


    ///////////////////////////////////////////////////////////////////
    ////                         private methods                   ////

    /**
     *  Description of the Method
     */
    private void _printConstructor() {

        _printStream.println(" public: ");
        _printStream.println(_prefix + _pn.getName() + "(");

        String csl = "Id n, ";

        Iterator I = _pn.getAdg().getParameterList().iterator();
        while( I.hasNext() ) {
            csl += "int parm_" + ((ADGParameter) I.next()).getName() + ", ";
        }

        csl = csl.substring(0, csl.length() - 2);
	_printStream.print(_prefix + _prefix + csl);

        _printStream.println("");
        _printStream.println(_prefix + ") :");

        _prefixInc();
        csl = _prefix + "ProcessNetwork(n)";

        I = _pn.getChannelList().iterator();
        while( I.hasNext() ) {
	    CDChannel ch = (CDChannel) I.next();
            String channelName = ch.getName();
	    int chSize = ( (ADGEdge) ch.getAdgEdgeList().get(0) ).getSize();

	    if (chSize < 1) {
                 csl += ",\n" + _prefix + channelName + "(id(\"" + channelName + "\"),0,65536)";
	    } else {
                 csl += ",\n" + _prefix + channelName + "(id(\"" + channelName + "\")," + chSize + "," + chSize + ")";
	    }

         }
        _printStream.print(csl);

        I = _pn.getProcessList().iterator();
        while( I.hasNext() ) {
            CDProcess process = (CDProcess) I.next();

            _printStream.print(",\n" + _prefix + process.getName() + "_instance" +
	                       "(id(\"" + process.getName() + "\")");
            _printConnections( process );
        }

        _printStream.println("");
        _printStream.println(_prefix + "{");
        _printStream.println(_prefix + "};");
    }

    /**
     *  Description of the Method
     *
     * @param  x Description of the Parameter
     */
    private void _printConnections( CDProcess x ) {
        String ed;
        String csl = "";
        Iterator i;
        CDGate gate;

        i = x.getGateList().iterator();
        while( i.hasNext() ) {
            gate = (CDGate) i.next();
	    csl += ", " + gate.getChannel().getName();
        }

        i = _pn.getAdg().getParameterList().iterator();
        while( i.hasNext() ) {
            csl += ", parm_" + ((ADGParameter) i.next()).getName();
        }
        _printStream.print(csl + ")");
    }


    /**
     */
    private void _writeConfigFile() {
        try {
            // create the makefile
            PrintStream cf = _openConfigFile();

            //System.out.print("Generating config file .........");

            cf.println("#config file for YAPI Process Networks");
            cf.println("#@Author: ESPAM");
            cf.println(" ");
            cf.println("ARCH = Linux");
            cf.println("CC = gcc");
            cf.println("CXX = g++");
            cf.println("RTL = pam");
            cf.println("SYS_LIBS =");

            //System.out.println("[Done]");
        }
        catch( Exception e ) {
            System.out.println("Error: " + e.getMessage());
            System.out.println("Cannt create the default config file");
            System.out.println("please supply your own config file");
        }
    }


    /**
     */
    private void _writeSourceFile() {
        try {
            // create the makefile
            PrintStream sf = _openSourceFile();

            //System.out.print("Generating config file .........");

            sf.println("#source file for YAPI Process Networks");
            sf.println("#@Author: ESPAM");
            sf.println(" ");
            sf.println("OBJ_FILES = ");

            //System.out.println("[Done]");
        }
        catch( Exception e ) {
            System.out.println("Error: " + e.getMessage());
            System.out.println("Cannt create the default source file");
            System.out.println("please supply your own config file");
        }
    }

    /**
     */
    private void _writeMainFile() {
        try {
            // create the makefile
            PrintStream maf = _openMainFile();

            //System.out.print("Generating main.cc file .........");

            maf.println("//main.cc file for YAPI Process Networks");
            maf.println("//@Author: ESPAM");
            maf.println(" ");
            maf.println("#include \"" + _pn.getName() + "_KPN.h\"");
            maf.println("#include <fstream>");
            maf.println("using namespace std;");
            maf.println(" ");
            maf.println("int main()");
            maf.println("{");
            maf.println(" ");
            maf.print("   " + _pn.getName() + " " + _pn.getName() + "( id(\"" + _pn.getName() + "\")");

            ADGParameter parameter;
            Iterator i = _pn.getAdg().getParameterList().iterator();

            while( i.hasNext() ) {
                parameter = (ADGParameter) i.next();
                maf.print(", " + parameter.getValue());
            }
            maf.println(");");
            maf.println(" ");
            maf.println("       RTE rte;");
            maf.println(" ");
            maf.println("	// start the processes and");
            maf.println("	// wait for processes to finish");
            maf.println(" ");
            maf.println("	rte.start(" + _pn.getName() + ");");
            maf.println(" ");
	    maf.println("	// generate dotty file");
            maf.println("	ofstream i(\"./"+ _pn.getName() + "_KPN.dot\");");
            maf.println("	printDotty(" + _pn.getName() + ", i);");
            maf.println(" ");
	    maf.println("	// generate workload information");
            maf.println("	printComputationWorkload(" + _pn.getName() + ");");
            maf.println("	printCommunicationWorkload(" + _pn.getName() + ");");
            maf.println(" ");
            maf.println("	i.close();");
            maf.println(" ");
            maf.println("}");

            //System.out.println("[Done]");
        }
        catch( Exception e ) {
            System.out.println("Error: " + e.getMessage());
            System.out.println("Cannt create the default main.cc file");
            System.out.println("please supply your own main.cc file");
        }
    }

    /**
     */
    private void _writeMakeFile() {
        try {
            // create the makefile
            PrintStream mf = _openMakefileFile();

            //System.out.print("Generating Makefile .........");

            mf.println("#Makefile for YAPI Panda Process Networks");
            mf.println("#@Author: ESPAM");
            mf.println(" ");
            mf.println("include ./config");
            mf.println("include ./sources");
            mf.println("COLLECT       = -collector=/cadappl/gcc/2.8.1/HP-UX_B.10.20/lib/gcc-lib/hppa1.1-hp-hpux10.20/2.8.1/ld");
            mf.println("PUREOPTS      = -leaks-at-exit=yes -inuse-at-exit=yes -chain-length=\"12\"");
            mf.println("PURIFY        = purify $(COLLECT) $(PUREOPTS)");
            mf.println("QUANTOPTS     = -g++=yes");
            mf.println("QUANTIFY      = quantify $(COLLECT) $(QUANTOPTS)");
	    mf.println("YAPI          = $(HOME)/yapi-2.0.0");
            mf.println("INCLUDES      = -I $(YAPI)/include");
            mf.println("LIBS          = -L $(YAPI)/lib -lyapi $(SYS_LIBS)");
            mf.println("CXXFLAGS      = -O -g $(INCLUDES)");
            mf.println("LD            = $(CXX)");
            mf.println("#LD           = $(PURIFY) $(CXX)");
            mf.println("LDFLAGS       = $(CXXFLAGS)");
            mf.println("OBJS          = main.o $(OBJ_FILES)");
            mf.println("PROGRAM       = run");
            mf.println("all:		$(PROGRAM)");
            mf.println("test:		$(PROGRAM)");
            mf.println("		./$(PROGRAM)");
            mf.println("$(PROGRAM):     $(OBJS)");
            mf.println("		$(LD) $(LDFLAGS) $(OBJS) $(LIBS) -o $(PROGRAM)");
            mf.println("clean:;		rm -rf *.o $(PROGRAM) core ii_files");

            //System.out.println("[Done]");
        }
        catch( Exception e ) {
            System.out.println("Error: " + e.getMessage());
            System.out.println("Cannot create the default makefile");
            System.out.println("please supply your own makefile");
        }
    }


    /**
     *  Description of the Method
     *
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openConfigFile()
             throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";
        // Create the directory indicated by the '-o' option. Otherwise
        // select the orignal filename. (REFACTOR)
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getFileName() + "/config";
        } else {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getOutputFileName() + "/config";
        }
        OutputStream file = null;
        file = new FileOutputStream( fullFileName );
        printStream = new PrintStream( file );
        return printStream;
    }

    /**
     *  Description of the Method
     *
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openSourceFile()
             throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";
        // Create the directory indicated by the '-o' option. Otherwise
        // select the orignal filename. (REFACTOR)
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getFileName() + "/sources";
        } else {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getOutputFileName() + "/sources";
        }
        OutputStream file = null;
        file = new FileOutputStream( fullFileName );
        printStream = new PrintStream( file );
        return printStream;
    }

    /**
     *  Description of the Method
     *
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openMainFile()
             throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";
        // Create the directory indicated by the '-o' option. Otherwise
        // select the orignal filename. (REFACTOR)
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getFileName() + "/main.cc";
        } else {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getOutputFileName() + "/main.cc";
        }
        OutputStream file = null;
        file = new FileOutputStream( fullFileName );
        printStream = new PrintStream( file );
        return printStream;
    }

    /**
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openMakefileFile()
             throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";
        // Create the directory indicated by the '-o' option. Otherwise
        // select the orignal filename. (REFACTOR)
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getFileName() + "/Makefile";
        } else {
            fullFileName =
                    ui.getBasePath() + "/" +
                    ui.getOutputFileName() + "/Makefile";
        }
        OutputStream file = null;

        file = new FileOutputStream( fullFileName );
        printStream = new PrintStream( file );
        return printStream;
    }


    ///////////////////////////////////////////////////////////////////
    ////                         private variables                 ////

    /**
     */
    private CDProcessNetwork _pn = null;
}


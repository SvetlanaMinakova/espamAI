/*******************************************************************\

The ESPAM Software Tool 
Copyright (c) 2004-2008 Leiden University (LERC group at LIACS).
All rights reserved.

The use and distribution terms for this software are covered by the 
Common Public License 1.0 (http://opensource.org/licenses/cpl1.0.txt)
which can be found in the file LICENSE at the root of this distribution.
By using this software in any fashion, you are agreeing to be bound by 
the terms of this license.

You must not remove this notice, or any other, from this software.

\*******************************************************************/

package espam.visitor.xps.cdpn;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Iterator;

import espam.datamodel.EspamException;
import espam.datamodel.platform.Resource;
import espam.datamodel.platform.Platform;
import espam.datamodel.platform.host_interfaces.ADMXRCII;
import espam.datamodel.platform.host_interfaces.ADMXPL;
import espam.datamodel.platform.host_interfaces.XUPV5LX110T;
import espam.datamodel.platform.host_interfaces.ML505;
import espam.datamodel.platform.processors.Processor;
import espam.datamodel.pn.cdpn.CDProcessNetwork;
import espam.datamodel.pn.cdpn.CDProcess;
import espam.main.UserInterface;

import espam.datamodel.mapping.Mapping;
import espam.datamodel.mapping.MProcessor;

import espam.visitor.CDPNVisitor;

//////////////////////////////////////////////////////////////////////////
//// Xmp Visitor

/**
 *  This class is a class for a visitor that is used to generate
 *  project file for Xps tool.
 *
 * @author  Wei Zhong
 * @version  $Id: XmpVisitor.java,v 1.3 2010/04/02 12:21:25 nikolov Exp $
 */

public class XmpVisitor extends CDPNVisitor {

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                     ///

    /**
     *  Constructor for the XmpVisitor object
     */
    public XmpVisitor( Mapping mapping )
        throws FileNotFoundException,EspamException {
    	
    	_mapping = mapping;
	_targetBoard = _getBoard( mapping.getPlatform() );
    	
    	_ui = UserInterface.getInstance();

        if (_ui.getOutputFileName() == "") {
	    _codeDir = _ui.getBasePath() + "/" + _ui.getFileName();
        } else {
	    _codeDir = _ui.getBasePath() + "/" + _ui.getOutputFileName();
        }

        _printStream = _openFile("system.xmp");
		_printStream.println("# system.xmp file for Xilinx Platform Studio");
        _printStream.println("# File automatically generated by ESPAM");
		_printStream.println("# Please do not modify this file by hand");
    }
    
    /**
     * @param  x Description of the Parameter
     */
    public void visitComponent( CDProcessNetwork x ) {
    	try {
	    if( _targetBoard.equals("ADM-XRC-II") || _targetBoard.equals("ADM-XPL") ) { 

		_printStream.println("XmpVersion: 6.2 ");
		_printStream.println("IntStyle: default");
		_printStream.println("MHS File: system.mhs");
		_printStream.println("MSS File: system.mss");
		_printStream.println("NPL File: projnav/system.npl ");

		if( _targetBoard.equals("ADM-XRC-II") ) {
			_printStream.println("UcfFile: data/system_ADMXRCII.ucf"); //?
			_printStream.println("Architecture: virtex2");
			_printStream.println("Device: xc2v6000");
			_printStream.println("Package: ff1152");
			_printStream.println("SpeedGrade: -5");
		} else {
			_printStream.println("UcfFile: data/system_ADMXPL.ucf"); //?
			_printStream.println("Architecture: virtex2p");
			_printStream.println("Device: xc2vp20");
			_printStream.println("Package: ff896");
			_printStream.println("SpeedGrade: -6");
		}

		_printStream.println("UseProjNav: 0");
		_printStream.println("AddToNPL: 0");
		_printStream.println("PNImportBitFile: projnav/system.bit");
		_printStream.println("PNImportBmmFile: implementation/system_stub.bmm");
		_printStream.println("UserCmd1:");
		_printStream.println("UserCmd2:");
		_printStream.println("SynProj: xst");
		_printStream.println("ReloadPbde: 0");
		_printStream.println("MainMhsEditor: 0");
		_printStream.println("InsertNoPads: 0");
		_printStream.println("HdlLang: VHDL");
		_printStream.println("Simulator: mti");
		_printStream.println("SimModel: BEHAVIORAL");
		_printStream.println("SimXLib:");
		_printStream.println("SimEdkLib:");       
	
		_visitAllProcessors( x );
		
	    } else if( _targetBoard.equals("XUPV5-LX110T") || _targetBoard.equals("ML505") ) {

		if( _targetBoard.equals("XUPV5-LX110T") ) {

			_printStream.println("XmpVersion: 11.2");
			_printStream.println("VerMgmt:");
			_printStream.println("IntStyle: default");
			_printStream.println("MHS File: system.mhs");
			_printStream.println("MSS File: system.mss");
	
			_printStream.println("UcfFile: data/system_XUPV5LX110T.ucf");
			_printStream.println("Architecture: virtex5");
			_printStream.println("Device: xc5vlx110t");
			_printStream.println("Package: ff1136");
			_printStream.println("SpeedGrade: -3");

		} else {

			_printStream.println("XmpVersion: 10.1");
			_printStream.println("VerMgmt: 10.1");
			_printStream.println("IntStyle: default");
			_printStream.println("MHS File: system.mhs");
			_printStream.println("MSS File: system.mss");
	
			_printStream.println("UcfFile: data/system_ML505.ucf");
			_printStream.println("Architecture: virtex5");
			_printStream.println("Device: xc5vlx50t");
			_printStream.println("Package: ff1136");
			_printStream.println("SpeedGrade: -1");
		}

		_printStream.println("UserCmd1:"); 
		_printStream.println("UserCmd1Type: 0");
		_printStream.println("UserCmd2:"); 
		_printStream.println("UserCmd2Type: 0");
		_printStream.println("GenSimTB: 0");
		_printStream.println("SdkExportBmmBit: 1");
		_printStream.println("SdkExportDir: SDK/SDK_Export");
		_printStream.println("InsertNoPads: 0");
		_printStream.println("WarnForEAArch: 1");
		_printStream.println("HdlLang: VHDL");
		_printStream.println("SimModel: BEHAVIORAL");
		_printStream.println("EnableParTimingError: 0");
		_printStream.println("ShowLicenseDialog: 1");

		// Print for all processors here
		Resource resource;
		Iterator i;
		i = _mapping.getPlatform().getResourceList().iterator();
		while( i.hasNext() ) {
		resource = (Resource) i.next();
		if (resource instanceof Processor) {
			Processor p = (Processor) resource;
			_printStream.println("Processor: " + p.getName());
			_printStream.println("BootLoop: 0");
			_printStream.println("XmdStub: 0");
		}
		}
	
// add the host interface MicroBlaze

		_printStream.println("Processor: host_if_mb");
		_printStream.println("BootLoop: 0");
		_printStream.println("XmdStub: 0");

		_printStream.println("SwProj: HOST_IF");
		_printStream.println("Processor: host_if_mb");
		_printStream.println("Executable: host_if_mb/executable.elf");
		_printStream.println("Source: code/HOST_IF/main.cpp" );
		_printStream.println("Header: code/aux_func.h"); //?
		_printStream.println("Header: code/MemoryMap.h"); //?
		_printStream.println("DefaultInit: executable");
		_printStream.println("InitBram: 1");
		_printStream.println("Active: 1");
		_printStream.println("CompilerOptLevel: 2");
		_printStream.println("GlobPtrOpt: 0");
		_printStream.println("DebugSym: 0");
		_printStream.println("ProfileFlag: 0");
                
		if( _targetBoard.equals("ADM-XRC-II") || _targetBoard.equals("ADM-XPL") ) {
			_printStream.println("AsmOpt:");
			_printStream.println("LinkOpt:");
		} else {
			_printStream.println("CompileInXps: 1");
			_printStream.println("NonXpsApp: 0");
		}

		_printStream.println("ProgStart: 0x50");
		_printStream.println("StackSize:");
		_printStream.println("HeapSize:");
		_printStream.println("LinkerScript:");
		_printStream.println("ProgCCFlags:");

		_visitAllProcessors( x );
	    }	
	} catch (Exception e) {
                System.out.println(" In Xmp Visitor: exception " +
    			       "occured: " + e.getMessage());
                e.printStackTrace();
    	}
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                    ///
    
    /**
     *  Open a file to write
     *  @param fileName the fullpath file name
     */
    private PrintStream _openFile(String fileName) throws FileNotFoundException {
        PrintStream ps = null;
        String fn = "";

        System.out.println(" -- OPEN FILE: " + fileName);

	    fn = _codeDir + "/" + fileName;
        if (fileName.equals(""))
            ps = new PrintStream(System.out);
        else
            ps = new PrintStream(new FileOutputStream(fn));

        return ps;
    }

    /**
     *  Get the target FPGA board
     *  @param platform
     */
    private String _getBoard( Platform x ) {
	
	String board = "";
        Iterator j = x.getResourceList().iterator();
    	while (j.hasNext()) {
            Resource resource = (Resource)j.next();
            if( resource instanceof ADMXRCII ) {
               board = "ADM-XRC-II";
            } else if( resource instanceof ADMXPL ) {
               board = "ADM-XPL";
            } else if( resource instanceof XUPV5LX110T ) {
               board = "XUPV5-LX110T";
            } else if( resource instanceof ML505 ) {
               board = "ML505";
            }
        }  

	return board;
    }


    /**
     *  visit processors
     *  @param CDProcessNetwork
     */
    private void _visitAllProcessors( CDProcessNetwork x ) {
/*	Iterator i;
	// Visit all process resource
	Resource resource;
	i = _mapping.getPlatform().getResourceList().iterator();
	while( i.hasNext() ) {
	   resource = (Resource) i.next();
	   if (resource instanceof Processor) {
		Processor p = (Processor) resource;
		_printStream.println("Processor: " + p.getName());
		_printStream.println("BootLoop: 0");
		_printStream.println("XmdStub: 0");
	   }
	}
*/
	Resource resource;
	Iterator j = x.getProcessList().iterator();
	while (j.hasNext()) {
	   CDProcess p = (CDProcess) j.next();
	   MProcessor mProcessor = _mapping.getMProcessor(p);
	   resource = mProcessor.getResource();
	   if (resource instanceof Processor) {
		_printStream.println("SwProj: Proj_" + resource.getName());
		_printStream.println("Processor: " + resource.getName());
		_printStream.println("Executable: " + resource.getName() + "/executable.elf");
		_printStream.println("Source: code/" + p.getName() + "/" + p.getName() + ".cpp" );
		_printStream.println("Header: code/aux_func.h");
		_printStream.println("Header: code/MemoryMap.h");
		_printStream.println("DefaultInit: executable");
		_printStream.println("InitBram: 1");
		_printStream.println("Active: 1");
		_printStream.println("CompilerOptLevel: 2");
		_printStream.println("GlobPtrOpt: 0");
		_printStream.println("DebugSym: 0");
		_printStream.println("ProfileFlag: 0");
                
		if( _targetBoard.equals("ADM-XRC-II") || _targetBoard.equals("ADM-XPL") ) {
			_printStream.println("AsmOpt:");
			_printStream.println("LinkOpt:");
		} else {
			_printStream.println("CompileInXps: 1");
			_printStream.println("NonXpsApp: 0");
		}

		_printStream.println("ProgStart: 0x50");
		_printStream.println("StackSize:");
		_printStream.println("HeapSize:");
		_printStream.println("LinkerScript:");
		_printStream.println("ProgCCFlags:");

		
		if (mProcessor.getScheduleType() == 1) {
			_printStream.println("LFlags: xilkernel");
		}
	   }
	}
    }
  

    /**
     *  visit with target = ADM-XPL
     *  @param CDProcessNetwork
     */
    private void _visitADMXPL( CDProcessNetwork x ) {
    }

    /**
     *  visit with target = XUPV5-LX110T
     *  @param CDProcessNetwork
     */
    private void _visitXUPV5LX110T( CDProcessNetwork x ) {
    }
    
    /**
     *  visit with target = ML505
     *  @param CDProcessNetwork
     */
    private void _visitML505( CDProcessNetwork x ) {
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private variables                  ///
    
    private UserInterface _ui = null;
    
    private String _codeDir;
    
    private PrintStream _printStream = null;
    
    private Mapping _mapping = null;

    private String _targetBoard = "";
}

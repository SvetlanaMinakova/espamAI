/*******************************************************************\

The ESPAM Software Tool 
Copyright (c) 2004-2008 Leiden University (LERC group at LIACS).
All rights reserved.

The use and distribution terms for this software are covered by the 
Common Public License 1.0 (http://opensource.org/licenses/cpl1.0.txt)
which can be found in the file LICENSE at the root of this distribution.
By using this software in any fashion, you are agreeing to be bound by 
the terms of this license.

You must not remove this notice, or any other, from this software.

\*******************************************************************/

package espam.visitor.xps.platform;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.Vector;
import java.math.*;

import espam.datamodel.EspamException;
import espam.datamodel.mapping.Mapping;
import espam.datamodel.platform.Platform;
import espam.datamodel.platform.Resource;
import espam.datamodel.platform.Port;
import espam.datamodel.platform.Link;
import espam.datamodel.platform.processors.Processor;
import espam.datamodel.platform.processors.PowerPC;
import espam.datamodel.platform.processors.MicroBlaze;
import espam.datamodel.platform.processors.MemoryMap;
import espam.datamodel.platform.processors.Page;
import espam.datamodel.platform.memories.MultiFifo;
import espam.datamodel.platform.memories.Memory;
import espam.datamodel.platform.memories.Fifo;
import espam.datamodel.platform.memories.BRAM;
import espam.datamodel.platform.memories.ZBT;
import espam.datamodel.platform.communication.Crossbar;
import espam.datamodel.platform.peripherals.ZBTMemoryController;
import espam.datamodel.platform.peripherals.Uart;
import espam.datamodel.platform.ports.CompaanInPort;
import espam.datamodel.platform.ports.CompaanOutPort;
import espam.datamodel.platform.ports.FifoReadPort;
import espam.datamodel.platform.ports.FifoWritePort;
import espam.datamodel.platform.ports.PLBPort;
import espam.datamodel.platform.ports.LMBPort;
import espam.datamodel.platform.ports.DLMBPort;
import espam.datamodel.platform.ports.ILMBPort;
import espam.datamodel.platform.ports.OPBPort;
import espam.datamodel.platform.hwnodecompaan.CompaanHWNode;
import espam.datamodel.platform.controllers.MemoryController;
import espam.datamodel.platform.controllers.FifosController;
import espam.datamodel.platform.controllers.MultiFifoController;
import espam.datamodel.platform.controllers.ReadCrossbarController;
import espam.main.UserInterface;

import espam.visitor.PlatformVisitor;
import espam.visitor.dot.platform.PlatformDotVisitor;
import espam.visitor.xml.cdpn.CDPNXmlVisitor;
import espam.visitor.yapiPN.YapiStatementVisitor;
import espam.visitor.ymlPN.YmlNetworkVisitor;


//////////////////////////////////////////////////////////////////////////
//// Platform Mhs Visitor

/**
 *  This class is a class for a visitor that is used to generate
 *  Microprocessor Hardware Specification for Xps tool.
 *
 * @author  Wei Zhong, Todor Stefanov, Hristo Nikolov, Joris Huizer
 * @version  $Id: MhsVisitor.java,v 1.4 2009/05/20 13:52:33 stefanov Exp $
 */

public class MhsVisitor extends PlatformVisitor {

    ///////////////////////////////////////////////////////////////////
    ////                         public methods                     ///

    /**
     *  Constructor for the MhsVisitor object
     */
    public MhsVisitor(Mapping mapping)
        throws FileNotFoundException,EspamException {
    	
    	_ui = UserInterface.getInstance();
	_mapping = mapping;

        _printStream = _openFile("system", "mhs");
        _printStream.println("## File automatically generated by ESPAM");
        _printStream.println("");
        _printStream.println("");
    	
    }
    
    /**
     *  Print a Mhs file in the correct format for MHS.
     *
     * @param  x The platform that needs to be rendered.
     */
    public void visitComponent(Platform x) {

        _prefixInc();
        
        Iterator j;
        //Visit all processes
        Resource resourceCheck;
        j = x.getResourceList().iterator();
        while( j.hasNext() ) {
            resourceCheck = (Resource) j.next();
            if ( resourceCheck instanceof ZBTMemoryController ) {
            	_numZbtCtrl++;
            }
            if ( resourceCheck instanceof MicroBlaze ) {
            	_numMb++;
            }
            if ( resourceCheck instanceof Uart ) {
            	_numUart++;
            }
            if ( resourceCheck instanceof CompaanHWNode){
            	_numHWNode++;
            }
        }
        
        _printStream.println( 
        		" PARAMETER VERSION = 2.1.0");
        
        if ( _numZbtCtrl == 0 ) {
        	_printStream.println( 
            		" PORT sys_clk = sys_clk_s, DIR = IN, SIGIS = CLK\n" +
            		" PORT system_reset = net_design_rst, DIR = IN");
        } else {
        	_printStream.println( 
            		" PORT lclk = lclk, DIR = IN\n" +
            		" PORT mclk = mclk, DIR = IN\n" +
            		" PORT ramclki = ramclki, VEC = [1:0], DIR = IN\n" +
            		" PORT ramclko = ramclko, VEC = [1:0], DIR = OUT\n" +
            		" PORT lreseto_l = lreseto_l, DIR = IN\n" +
            		" PORT lwrite = lwrite, DIR = IN\n" +
            		" PORT lads_l = lads_l, DIR = IN\n" +
            		" PORT lblast_l = lblast_l, DIR = IN\n" +
            		" PORT lbterm_l = lbterm_l, DIR = INOUT\n" +
            		" PORT ld = ld, VEC = [31:0], DIR = INOUT\n" +
            		" PORT la = la, VEC = [23:2], DIR = IN\n" +
            		" PORT lreadyi_l = lreadyi_l, DIR = OUT\n" +
            		" PORT lbe_l = lbe_l, VEC = [3:0], DIR = IN\n" +
            		" PORT fholda = fholda, DIR = IN\n" +
            		" PORT ra0 = ra0, VEC = [19:0], DIR = OUT\n" +
            		" PORT rd0 = rd0, VEC = [31:0], DIR = INOUT\n" +
            		" PORT rc0 = rc0, VEC = [8:0], DIR = OUT\n" +
            		" PORT ra1 = ra1, VEC = [19:0], DIR = OUT\n" +
            		" PORT rd1 = rd1, VEC = [31:0], DIR = INOUT\n" +
            		" PORT rc1 = rc1, VEC = [8:0], DIR = OUT\n" +
            		" PORT ra2 = ra2, VEC = [19:0], DIR = OUT\n" +
            		" PORT rd2 = rd2, VEC = [31:0], DIR = INOUT\n" +
            		" PORT rc2 = rc2, VEC = [8:0], DIR = OUT\n" +
            		" PORT ra3 = ra3, VEC = [19:0], DIR = OUT\n" +
            		" PORT rd3 = rd3, VEC = [31:0], DIR = INOUT\n" +
            		" PORT rc3 = rc3, VEC = [8:0], DIR = OUT\n" +
            		" PORT ra4 = ra4, VEC = [19:0], DIR = OUT\n" +
            		" PORT rd4 = rd4, VEC = [31:0], DIR = INOUT\n" +
            		" PORT rc4 = rc4, VEC = [8:0], DIR = OUT\n" +
            		" PORT ra5 = ra5, VEC = [19:0], DIR = OUT\n" +
            		" PORT rd5 = rd5, VEC = [31:0], DIR = INOUT\n" +
            		" PORT rc5 = rc5, VEC = [8:0], DIR = OUT");	
        }
        
        for (int i = 1; i <= _numUart; i++) {
			_printStream.println(
			        " PORT RS232_Uart_" + i + "_RX = RS232_Uart_" + i + "_RX, DIR = I\n" +
			        " PORT RS232_Uart_" + i + "_TX = RS232_Uart_" + i + "_TX, DIR = O");
        }
        
        _printStream.println("");

	    Iterator i;

        // Visit all processes
        Resource resource;
        i = x.getResourceList().iterator();
        while( i.hasNext() ) {
            resource = (Resource) i.next();
            resource.accept(this);
        }

        _printStream.println("");
        
        _prefixDec();
        _printStream.println("");
    }
/*---------------------------------------- Processors --------------------------------------------------------*/
    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(PowerPC x) {

    }

    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(MicroBlaze x) {
    	
       Iterator i;
       i = x.getPortList().iterator();
      
       String dLmbLinkName = "";
       String iLmbLinkName = "";
       String opbLinkName = "";

       while (i.hasNext()) {
           Port port = (Port) i.next();
           if ( port instanceof DLMBPort ) {
              dLmbLinkName = port.getLink().getName();
              _printStream.println(
      		       "BEGIN lmb_v10\n" +
    		       " PARAMETER INSTANCE = " + dLmbLinkName + "\n" +
    		       " PARAMETER HW_VER = 1.00.a\n" +
    		       " PARAMETER C_EXT_RESET_HIGH = 0\n" +
    		       " PORT SYS_Rst = net_design_rst\n" +
    		       " PORT LMB_Clk = sys_clk_s\n" +
    		       "END\n");
           }
           if ( port instanceof ILMBPort ) {
              iLmbLinkName = port.getLink().getName();
              _printStream.println(
      		       "BEGIN lmb_v10\n" +
    		       " PARAMETER INSTANCE = " + iLmbLinkName + "\n" +
    		       " PARAMETER HW_VER = 1.00.a\n" +
    		       " PARAMETER C_EXT_RESET_HIGH = 0\n" +
    		       " PORT SYS_Rst = net_design_rst\n" +
    		       " PORT LMB_Clk = sys_clk_s\n" +
    		       "END\n");
           }
           if ( port instanceof OPBPort ) {
               opbLinkName = port.getLink().getName();
               _printStream.println(
       		       "BEGIN opb_v20\n" +
     		       " PARAMETER INSTANCE = " + opbLinkName + "\n" +
     		       " PARAMETER HW_VER = 1.10.c\n" +
     		       " PARAMETER C_EXT_RESET_HIGH = 0\n" +
     		       " PORT SYS_Rst = net_design_rst\n" +
     		       " PORT OPB_Clk = sys_clk_s\n" +
     		       "END\n");
            }
       }

       _printStream.println(
   		       "BEGIN fin_ctrl\n" +
 		       " PARAMETER INSTANCE = fin_ctrl_P" + _numFinCtrl + "\n" +
 		       " PARAMETER HW_VER = 1.00.a\n" +
 		       " PARAMETER C_BASEADDR = 0xf9000000\n" +
 		       " PARAMETER C_HIGHADDR = 0xf900000f\n" +
 		       " PARAMETER C_AB = 8\n" +
 		       " BUS_INTERFACE SLMB = " + dLmbLinkName + "\n" +
 		       " PORT Sl_FinOut = net_fin_signal_P" + _numFinCtrl + "\n" +
 		       "END\n");
       
       if( _ui.getDebuggerFlag() ) {
    	   _printStream.println(
       		       "BEGIN clock_cycle_counter\n" +
     		       " PARAMETER INSTANCE = clock_cycle_counter_P" + _numFinCtrl + "\n" +
     		       " PARAMETER HW_VER = 1.00.a\n" +
     		       " PARAMETER C_BASEADDR = 0xf8000000\n" +
     		       " PARAMETER C_HIGHADDR = 0xf8000003\n" +
     		       " BUS_INTERFACE SLMB = " + dLmbLinkName + "\n" +
     		       " PORT LMB_Clk = sys_clk_s\n" +
     		       "END\n");
		    
		}
	
	if ( _mapping.getProcessor(x.getName()).getScheduleType() == 1 ) {
    	   _printStream.println(
			"BEGIN opb_timer\n" +
			" PARAMETER INSTANCE = opb_timer_" + _numTimers + "\n" +
			" PARAMETER HW_VER = 1.00.b\n" +
			" PARAMETER C_BASEADDR = 0xF1000000\n" +
			" PARAMETER C_HIGHADDR = 0xF100FFFF\n" +
			" BUS_INTERFACE SOPB = " + opbLinkName + "\n" +
			" PORT Interrupt = " + x.getName() + "_INTERRUPT\n" +
			"END\n");		    
	   _numTimers++;
	}
       
       _numFinCtrl++;
       
	   _printStream.println(
			"BEGIN microblaze\n" +
			" PARAMETER INSTANCE = " + x.getName() + "\n" +
			" PARAMETER HW_VER = 4.00.a\n" +
			" PARAMETER C_NUMBER_OF_PC_BRK = 1\n" +
			" PARAMETER C_NUMBER_OF_RD_ADDR_BRK = 0\n" +
			" PARAMETER C_NUMBER_OF_WR_ADDR_BRK = 0");
	   
	   i = x.getPortList().iterator();
       int numReadFsl = 0;
       int numWriteFsl = 0;
	   
        while (i.hasNext()) {
           Port port = (Port) i.next();
           if ( port instanceof FifoReadPort ) {
        	   Iterator j = x.getMemoryMapList().iterator();
               while (j.hasNext()) {
                  MemoryMap memoryMap = (MemoryMap) j.next();
                  if (memoryMap.getPort().getName().equals(port.getName())) {
                	  Page page = (Page) memoryMap.getPageList().get(0);
                	  _printStream.println(
              				" BUS_INTERFACE SFSL" + page.getBaseAddress() + " = " + page.getReadResource().getName() );
                	  numReadFsl++;
                  }
               
               }
        	   
           }
           if ( port instanceof FifoWritePort ) {
        	   Iterator j = x.getMemoryMapList().iterator();
               while (j.hasNext()) {
                  MemoryMap memoryMap = (MemoryMap) j.next();
                  if (memoryMap.getPort().getName().equals(port.getName())) {
                	  Page page = (Page) memoryMap.getPageList().get(0);
                	  _printStream.println(
              				" BUS_INTERFACE MFSL" + page.getBaseAddress() + " = " + page.getWriteResource().getName() );
                	  numWriteFsl++;
                  }
               
               }
        	   
           }
	}
	   
        int total = (numReadFsl > numWriteFsl) ? numReadFsl : numWriteFsl;
	   
        _printStream.println(
			  " BUS_INTERFACE DLMB = " + dLmbLinkName + "\n" +
			  " BUS_INTERFACE ILMB = " + iLmbLinkName );
        if ( !opbLinkName.equals("") ) {
             _printStream.println(
			  " BUS_INTERFACE DOPB = " + opbLinkName );
        }
        _printStream.println(
			  " PARAMETER C_FSL_LINKS = " + total + "\n" +
			  " PORT CLK = sys_clk_s");
	if ( _mapping.getProcessor(x.getName()).getScheduleType() == 1 ) {
		_printStream.println(
			  " PORT INTERRUPT = " + x.getName() + "_INTERRUPT");

	}
	_printStream.println(
			  "END\n");


    }
/*--------------------------------------- CompaanHWNode -------------------------------------------------------*/
    /**
     *  Print lines for the Compaan Hardware Node in the correct format for MHS.
     *
     * @param  x The Compaan Hardware Node that needs to be rendered.
     */
    public void visitComponent(CompaanHWNode x) {
    	_printStream.println(
    			"BEGIN " + x.getName() + "\n" +
    	    	"  PARAMETER INSTANCE = " + x.getName() + "_ip" + "\n" +
    	    	"  PARAMETER HW_VER = 1.00.a" + "\n" +
    	    	"  PARAMETER RESET_HIGH = 0 " + "\n" +
    	    	"  PARAMETER PAR_WIDTH = 16" + "\n" +
    	    	"  PARAMETER QUANT = 32" + "\n" );
    	    	
    	//in mhs, the right side is the fsl fifo name because it is not regarded as a component
    	    	Vector portList = x.getPortList();
    			Iterator i = portList.iterator();
    			while(i.hasNext()){
    				Port p = (Port) i.next();
    				
    				Iterator j = p.getLink().getPortList().iterator();
    				Fifo f = null;
    				while(j.hasNext()){
    					Port port = (Port) j.next();
                        //the port connect to the link which is not compaan port is the fifo port
    					if (! (port instanceof CompaanInPort) && !( port instanceof CompaanOutPort)){
    						f = (Fifo) port.getResource();
    					}
    				}
    				_printStream.println("  BUS_INTERFACE " + p.getName() + " = " + f.getName());
    			}
    	    	
    	_printStream.println(    	"  BUS_INTERFACE PAR_BUS = PARBUS" + "\n" + 
    			"  PORT CLK = sys_clk_s" + "\n" +
    	    	"  PORT RST = net_design_rst" + "\n" +
    	    
    	    	"  PORT STOP = net_fin_signal_IP_" + _numFinIP + "\n" +
    	    	"END\n");
    	
    	
    	_numFinIP++;
    	


    }
/*---------------------------------------- Memories ----------------------------------------------------------*/
    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(MultiFifo x) {

        int procType    = 0;
	String busType  = "";
	String slave    = "";
	String slaveBus = "";
	String vbBus    = "";
	int n_ch        = x.getFifoList().size();
	int nmbr        = 1;

	Iterator i;
        i = x.getPortList().iterator();
        while (i.hasNext()) {

            Port port = (Port) i.next();
	    if( port instanceof LMBPort ) {
	        procType = 1;
	        busType  = "lmb";
		slave    = "CTRL_BUS";
		slaveBus = port.getLink().getName();

	    } else if( port instanceof PLBPort ) {
	        procType = 0;
	        busType  = "plb";
		slave    = "PLB2IP";
		slaveBus = port.getLink().getName();

	    } else {
	        vbBus = port.getLink().getName();
	    }
	}

	_printStream.println(
        		"BEGIN vb_wrapper\n" +
        		" PARAMETER INSTANCE = " + x.getName() + "\n" +
        		" PARAMETER HW_VER = 1.00.a\n" +
        		" PARAMETER PROCESSOR_TYPE = " + procType + "\n" +
        		" PARAMETER N_CH = " + n_ch);

        i = x.getFifoList().iterator();
        while (i.hasNext()) {

            Fifo fifo = (Fifo) i.next();
	    int fifoSize = fifo.getSize();
	    _printStream.println(" PARAMETER CH_SIZE_" + nmbr++ + " = " + fifoSize );

	}

        _printStream.println(" BUS_INTERFACE " + slave + " = " + slaveBus);
        _printStream.println(" BUS_INTERFACE CB_BUS = " + vbBus);
        _printStream.println("END\n");

    }

    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(Fifo x) {

    	_printStream.println(
    			"BEGIN fsl_v20\n" +
    			" PARAMETER HW_VER = 2.00.a\n" +
    			" PARAMETER INSTANCE = " + x.getName() + "\n" +
    			" PARAMETER C_EXT_RESET_HIGH = 0\n" +
    			" PARAMETER C_ASYNC_CLKS = 0\n" +
    			" PARAMETER C_IMPL_STYLE = 1\n" +
    			" PARAMETER C_USE_CONTROL = 0\n" +
    			" PARAMETER C_FSL_DWIDTH = " + x.getDataWidth() + "\n" +
    			" PARAMETER C_FSL_DEPTH = " + x.getSize() + "\n" +
    			" PORT FSL_Clk = sys_clk_s\n" +
    			" PORT SYS_Rst = net_design_rst\n" +
    			"END\n");
    	
    }

     /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(BRAM x) {

    	_printStream.println(
    			"BEGIN bram_block\n" +
    			" PARAMETER INSTANCE = " + x.getName() + "\n" +
    			" PARAMETER HW_VER = 1.00.a" );
    			
    	Iterator i;
        i = x.getPortList().iterator();
        
        Port port = (Port) i.next();
        String lmbCtrlLinkAName = port.getLink().getName();
    	_printStream.println(
    			" BUS_INTERFACE PORTA = " + lmbCtrlLinkAName );
        
        if (i.hasNext()) {
            port = (Port) i.next();
            String lmbCtrlLinkBName = port.getLink().getName();
            _printStream.println(
        			" BUS_INTERFACE PORTB = " + lmbCtrlLinkBName );
        }

    	_printStream.println(
    			"END\n");
    }

    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(ZBT x) {

    }

    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(Memory x) {

    }

/*--------------------------------------- Controllers -------------------------------------------------------*/
    /**
     *  Print a line for a memory controller in the correct format for MHS.
     *
     * @param  x The controller that needs to be rendered.
     */
    public void visitComponent(MemoryController x) {

    	Iterator i = x.getPortList().iterator();

        String procLinkName = "";
        String memLinkName = "";
        String busType  = "";

        while (i.hasNext()) {
            Port port = (Port) i.next();
            Link link = port.getLink();

            Iterator j = link.getPortList().iterator();
            while (j.hasNext()) {
            	Port lPort = (Port) j.next();
            	if ( lPort.getResource() instanceof MicroBlaze ) {
            		procLinkName = link.getName();
                        busType  = "lmb";
            	} else if ( lPort.getResource() instanceof PowerPC ) {
            		procLinkName = link.getName();
                        busType  = "plb";
            	} else if ( lPort.getResource() instanceof BRAM ) {
            		memLinkName = link.getName();
            	}
            }
        }

        _printStream.println(
                    "BEGIN " + busType + "_bram_if_cntlr\n" +
                    " PARAMETER INSTANCE = " + x.getName() + "\n" +
		    " PARAMETER HW_VER = 1.00.b\n" +
		    " PARAMETER C_MASK = 0xff000000\n" +
        	    " PARAMETER C_BASEADDR = 0x" + _digitToStringHex(x.getBaseAddress(), 8) + "\n" +
        	    " PARAMETER C_HIGHADDR = 0x" + _digitToStringHex(x.getBaseAddress() + x.getSize() - 1, 8) + "\n" +
		    " BUS_INTERFACE SLMB = " + procLinkName + "\n" +
		    " BUS_INTERFACE BRAM_PORT = " + memLinkName + "\n" +
		    "END\n");

    }

    /**
     *  Print a line for a ReadCrossbar controller in the correct format for MHS.
     *
     * @param  x The controller that needs to be rendered.
     */
    public void visitComponent(ReadCrossbarController x) {

    }

    /**
     *  Print a line for a multi-fifo controller in the correct format for MHS.
     *
     * @param  x The controller that needs to be rendered.
     */
    public void visitComponent(MultiFifoController x) {

        String busType  = "";
        String slave    = "";
        String slaveBus = "";
        String vbBus    = "";

        Iterator i = x.getPortList().iterator();

        while (i.hasNext()) {
            Port port = (Port) i.next();
            Link link = port.getLink();

            Iterator j = link.getPortList().iterator();
            while (j.hasNext()) {
            	Port lPort = (Port) j.next();
            	if ( lPort.getResource() instanceof MicroBlaze ) {
	                busType  = "lmb";
                        slave    = "SLMB";
			slaveBus = link.getName();
            	} else if ( lPort.getResource() instanceof PowerPC ) {
	                busType  = "plb";
                        slave    = "PLB2IP";
                        slaveBus = link.getName();
            	} else if ( lPort.getResource() instanceof MultiFifo ) {
                    vbBus = link.getName();
                }
            }
        }

        _printStream.println(
                    "BEGIN " + busType + "_vb_ctrl\n" +
                    " PARAMETER INSTANCE = " + x.getName() + "\n" +
                    " PARAMETER HW_VER = 1.00.a\n" +
                    " PARAMETER C_BASEADDR = 0x" + _digitToStringHex(x.getBaseAddress(), 8) + "\n" +
                    " PARAMETER C_HIGHADDR = 0x" + _digitToStringHex(x.getBaseAddress() + _greaterPowerOfTwo(x.getSize()) - 1, 8) + "\n" +
                    " PARAMETER C_AB = 8\n" +
		    " PARAMETER C_AWIDTH   = 32\n" +
                    " PARAMETER C_DWIDTH   = 32");
        _printStream.println(" BUS_INTERFACE " + slave + " = " + slaveBus);
        _printStream.println(" BUS_INTERFACE VB_BUS = " + vbBus);
        _printStream.println("END\n");
    }

    /**
     *  Print a line for a fifos controller in the correct format for MHS.
     *
     * @param  x The controller that needs to be rendered.
     */
    public void visitComponent(FifosController x) {

        _printStream.println(
        		"BEGIN fifo_if_ctrl\n" +
        		" PARAMETER INSTANCE = " + x.getName() + "\n" +
        		" PARAMETER HW_VER = 1.00.a\n" +
        	    " PARAMETER C_BASEADDR = 0x" + _digitToStringHex(x.getBaseAddress(), 8) + "\n" +
        	    " PARAMETER C_HIGHADDR = 0x" + _digitToStringHex(x.getBaseAddress() + _greaterPowerOfTwo(x.getSize()) - 1, 8) + "\n" +
        		" PARAMETER C_AB = 8\n" +
        		" PARAMETER C_FIFO_WRITE = " + x.getNumberFifoWritePorts() + "\n" +
        		" PARAMETER C_FIFO_READ = " + x.getNumberFifoReadPorts() );

    	Iterator i;
        i = x.getFifoReadPorts().iterator();

        while (i.hasNext()) {
            Port port = (Port) i.next();
            Link link = port.getLink();
            Iterator j;
            j = link.getPortList().iterator();
            while (j.hasNext()) {
            	Port lPort = (Port) j.next();
            	if ( lPort.getResource() instanceof Fifo ) {
            		_fifoList.add(lPort.getResource());
            	}
            }
        }

        Iterator k = x.getPageList().iterator();

        while (k.hasNext()) {

        	Page page = (Page) k.next();

        	if (page.getReadResource() instanceof Fifo) {

        		Iterator l = _fifoList.iterator();
        		while (l.hasNext()) {
        			Fifo fifo = (Fifo) l.next();
        			if (page.getReadResource().getName().equals(fifo.getName())) {
        				int baseAddr = page.getBaseAddress();
        				int tempAddr = baseAddr & 0x0000ffff;
        				int num = ( tempAddr / 8 ) + 1;
        				_printStream.println(
        						" BUS_INTERFACE FIFO_READ_" + num + " = " + fifo.getName() );
        				l.remove();
        			}

        		}

        	}
        }

        _fifoList.clear();
        i = x.getFifoWritePorts().iterator();

        while (i.hasNext()) {
            Port port = (Port) i.next();
            Link link = port.getLink();
            Iterator j;
            j = link.getPortList().iterator();
            while (j.hasNext()) {
            	Port lPort = (Port) j.next();
            	if ( lPort.getResource() instanceof Fifo ) {
            		_fifoList.add(lPort.getResource());
            	}
            }
        }

        k = x.getPageList().iterator();

        while (k.hasNext()) {

        	Page page = (Page) k.next();

        	if (page.getWriteResource() instanceof Fifo) {

        		Iterator l = _fifoList.iterator();
        		while (l.hasNext()) {
        			Fifo fifo = (Fifo) l.next();
        			if (page.getWriteResource().getName().equals(fifo.getName())) {
        				int baseAddr = page.getBaseAddress();
        				int tempAddr = baseAddr & 0x0000ffff;
        				int num = ( tempAddr / 8 ) + 1;
        				_printStream.println(
        						" BUS_INTERFACE FIFO_WRITE_" + num + " = " + fifo.getName() );
        				l.remove();
        			}

        		}

        	}
        }

        i = x.getPortList().iterator();
        String lmbLink = "";

        while (i.hasNext()) {
            Port port = (Port) i.next();
            Link link = port.getLink();
            Iterator j;
            j = link.getPortList().iterator();
            while (j.hasNext()) {
            	Port lPort = (Port) j.next();
            	if ( !(lPort.getResource() instanceof Fifo) &&
            			!(lPort.getResource() instanceof FifosController) ) {
            		lmbLink = link.getName();
            	}
            }
        }

        _printStream.println(
        		" BUS_INTERFACE SLMB = " + lmbLink + "\n" +
        		"END\n");

    }


/*--------------------------------------- Communication -------------------------------------------------------*/
    /**
     *  Print a line for the process in the correct format for MHS.
     *
     * @param  x The process that needs to be rendered.
     */
    public void visitComponent(Crossbar x) {

        _printStream.println(
        		"BEGIN cb_wrapper\n" +
        		" PARAMETER INSTANCE = " + x.getName() + "\n" +
        		" PARAMETER HW_VER = 1.00.a\n" +
			" PARAMETER C_EXT_RESET_HIGH = 0\n" +
    		        " PORT RST = net_design_rst\n" +
    		        " PORT CLK = sys_clk_s");

    	Iterator i;
        i = x.getPortList().iterator();
        while (i.hasNext()) {

            Port port = (Port) i.next();
            Link link = port.getLink();

	    _printStream.println(" BUS_INTERFACE " + port.getName() + " = " + port.getLink().getName());
        }
	 _printStream.println("END\n");
    }
/*---------------------------------------- Link --------------------------------------------------------------*/
    /**
     *  Print a line for the channel in the correct format for MHS.
     *
     * @param  x The channel that needs to be rendered.
     */
    public void visitComponent(Link x) {

    }

/*---------------------------------------- Peripherals --------------------------------------------------------------*/
    /**
     *  Print a line for the ZBTMemoryController in the correct format for MHS.
     *
     * @param  x The ZBTMemoryController that needs to be rendered.
     */
    public void visitComponent(ZBTMemoryController x) {
    	if (_zbtInterfaceFlag == 0) {
    		_printStream.println(
        			"BEGIN zbt_main\n" +
        			" PARAMETER INSTANCE = host_zbt_main\n" +
        			" PARAMETER HW_VER = 1.00.a\n" +
        			" BUS_INTERFACE HOST_BUFF_0_PORT = buff_rd_0\n" +
        			" BUS_INTERFACE HOST_BUFF_1_PORT = buff_rd_1\n" +
        			" BUS_INTERFACE HOST_BUFF_2_PORT = buff_rd_2\n" +
        			" BUS_INTERFACE HOST_BUFF_3_PORT = buff_rd_3\n" +
        			" BUS_INTERFACE HOST_BUFF_4_PORT = buff_rd_4\n" +
        			" BUS_INTERFACE HOST_BUFF_5_PORT = buff_rd_5\n" +
        			" BUS_INTERFACE HOST_MUX_PORT = mux_to_host\n" +
        			" PORT lclk = lclk\n" +
        			" PORT mclk = mclk\n" +
        			" PORT ramclko = ramclko\n" +
        			" PORT ramclki = ramclki\n" +
        			" PORT lreseto_l = lreseto_l\n" +
        			" PORT lwrite = lwrite\n" +
        			" PORT lads_l = lads_l\n" +
        			" PORT lblast_l = lblast_l\n" +
        			" PORT lbterm_l = lbterm_l\n" +
        			" PORT ld = ld\n" +
        			" PORT la = la\n" +
        			" PORT lreadyi_l = lreadyi_l\n" +
        			" PORT lbe_l = lbe_l\n" +
        			" PORT fholda = fholda\n" +
        			" PORT CLK_out = sys_clk_s\n" +
        			" PORT RST_out = sys_rst_s\n" +
        			" PORT COMMAND_REG = net_command\n" +
        			" PORT DESIGN_STAT_REG = net_design_status\n" +
        			" PORT PARAMETER_REG = net_parameter\n" +
        			"END\n");
    		
    		_printStream.println(
        			"BEGIN host_design_ctrl\n" +
        			" PARAMETER INSTANCE = host_design_controller\n" +
        			" PARAMETER HW_VER = 1.00.a\n" +
        			" PARAMETER N_FIN = " + (_numMb + _numHWNode) + "\n" +
        			" PARAMETER PAR_WIDTH  = 16" + "\n" +
        			" PORT RST = sys_rst_s\n" +
        			" PORT COMMAND_REG = net_command\n" +
        			" PORT STATUS_REG = net_design_status\n" +
        			" PORT PARAMETER_REG = net_parameter\n" + 
        			" PORT RST_OUT = net_design_rst");
    		
    		for (int i = 1; i <= _numMb; i++) {
    			_printStream.println(
    			        " PORT FIN_REG_" + ( i - 1 ) + " = net_fin_signal_P" + i);
            }
        			
    		for (int i = _numMb ; i < _numMb + _numHWNode; i++){
    			_printStream.println(
    			        " PORT FIN_REG_" + i + " = net_fin_signal_IP_" + (i - _numMb + 1));
    		}
    		
    		if(_numHWNode > 0){
    			_printStream.println(" BUS_INTERFACE PAR_BUS = PARBUS");
    		}
    		
        			
    		_printStream.println(		
        			"END\n");
    		
    		_printStream.println(
        			"BEGIN mux\n" +
        			" PARAMETER INSTANCE = multiplexer\n" +
        			" PARAMETER HW_VER = 1.00.a\n" +
        			" PARAMETER N_MUX = " + _numZbtCtrl + "\n" +
        			" BUS_INTERFACE MUX_BUFF_PORT = buff_to_mux");
        	
    		for (int i = 0; i < _numZbtCtrl; i++) {
    			_printStream.println(
    			        " BUS_INTERFACE MUX_DESIGN_" + i + "_PORT = mux_design_" + i);
            }
        	
    		_printStream.println(
        			" BUS_INTERFACE MUX_HOST_PORT = mux_to_host\n" +
        			" PORT ra0 = ra0\n" +
        			" PORT ra1 = ra1\n" +
        			" PORT ra2 = ra2\n" +
        			" PORT ra3 = ra3\n" +
        			" PORT ra4 = ra4\n" +
        			" PORT ra5 = ra5\n" +
        			" PORT rc0 = rc0\n" +
        			" PORT rc1 = rc1\n" +
        			" PORT rc2 = rc2\n" +
        			" PORT rc3 = rc3\n" +
        			" PORT rc4 = rc4\n" +
        			" PORT rc5 = rc5\n" +
        			" PORT RST = sys_rst_s\n" +
        			" PORT CNTRL = net_command\n" +
        			"END\n");
    		
    		_printStream.println(
        			"BEGIN buffers\n" +
        			" PARAMETER INSTANCE = buff\n" +
        			" PARAMETER HW_VER = 1.00.a\n" +
        			" BUS_INTERFACE BUFF_MUX_PORT = buff_to_mux\n" +
        			" BUS_INTERFACE BUFF_RD_0_PORT = buff_rd_0\n" +
        			" BUS_INTERFACE BUFF_RD_1_PORT = buff_rd_1\n" +
        			" BUS_INTERFACE BUFF_RD_2_PORT = buff_rd_2\n" +
        			" BUS_INTERFACE BUFF_RD_3_PORT = buff_rd_3\n" +
        			" BUS_INTERFACE BUFF_RD_4_PORT = buff_rd_4\n" +
        			" BUS_INTERFACE BUFF_RD_5_PORT = buff_rd_5\n" +
        			" PORT rd0 = rd0\n" +
        			" PORT rd1 = rd1\n" +
        			" PORT rd2 = rd2\n" +
        			" PORT rd3 = rd3\n" +
        			" PORT rd4 = rd4\n" +
        			" PORT rd5 = rd5\n" +
        			"END\n");
    		
    	}
    	
    	_zbtInterfaceFlag++;
    	
    	Iterator i;
        i = x.getPortList().iterator();
       
        String opbLinkName = "";

        while (i.hasNext()) {
            Port port = (Port) i.next();
            if ( port instanceof OPBPort ) {
                opbLinkName = port.getLink().getName();
            	_printStream.println(
            			"BEGIN opb_zbt_controller\n" +
            			" PARAMETER INSTANCE = " + x.getName() + "\n" +
            			" PARAMETER HW_VER = 1.00.a\n" +
            			" PARAMETER C_BASEADDR = 0x" + _digitToStringHex(x.getBaseAddress(), 8) + "\n" +
                	    " PARAMETER C_HIGHADDR = 0x" + _digitToStringHex(x.getBaseAddress() + _greaterPowerOfTwo(x.getSize()) - 1, 8) + "\n" +
            			" PARAMETER C_EXTERNAL_DLL = 1\n" +
            			" PARAMETER C_ZBT_ADDR_SIZE = 20\n" +
            			" BUS_INTERFACE SOPB = " + opbLinkName + "\n" +
            			" BUS_INTERFACE DESIGN_BUFF_PORT = buff_rd_" + _numZbtCtrlVisit + "\n" +
            			" BUS_INTERFACE DESIGN_MUX_PORT = mux_design_" + _numZbtCtrlVisit + "\n" +
            			"END\n");
             }
        }
        
        _numZbtCtrlVisit++;

    }
    
    /**
     *  Print a line for the Uart in the correct format for MHS.
     *
     * @param  x The Uart that needs to be rendered.
     */
    public void visitComponent(Uart x) {
    	
    	Iterator i;
        i = x.getPortList().iterator();
       
        String opbLinkName = "";

        while (i.hasNext()) {
            Port port = (Port) i.next();
            if ( port instanceof OPBPort ) {
                opbLinkName = port.getLink().getName();
            	_printStream.println(
            			"BEGIN opb_uartlite\n" +
            			" PARAMETER INSTANCE = " + x.getName() + "\n" +
            			" PARAMETER HW_VER = 1.00.b\n" +
            			" PARAMETER C_BASEADDR = 0x" + _digitToStringHex(x.getBaseAddress(), 8) + "\n" +
                	    " PARAMETER C_HIGHADDR = 0x" + _digitToStringHex(x.getBaseAddress() + _greaterPowerOfTwo(x.getSize()) - 1, 8) + "\n" +
            			" PARAMETER C_CLK_FREQ = 100000000\n" +
            			" PARAMETER C_DATA_BITS = 8\n" +
            			" PARAMETER C_BAUDRATE = 9600\n" +
            			" PARAMETER C_ODD_PARITY = 0\n" +
            			" PARAMETER C_USE_PARITY = 0\n" +
            			" BUS_INTERFACE SOPB = " + opbLinkName + "\n" +
            			" PORT RX = RS232_Uart_" + _numUartVisit + "_RX\n" +
            			" PORT TX = RS232_Uart_" + _numUartVisit + "_TX\n" +
            			" PORT OPB_Clk = sys_clk_s\n" +
            			"END\n");
             }
        }
        
        _numUartVisit++;
        
    }

    ///////////////////////////////////////////////////////////////////
    ////                         private methods                    ///

    /**
     *  convert to hexical string
     *  @param xLong long value to be changed
     *  @param format length of the digit format
     */
    private String _digitToStringHex(int xInt, int format) {
        String binStr = Integer.toHexString(xInt);
        int binStrlength = binStr.length();
        if (format < binStrlength) {
            System.out.println(
                "Error!!!!: The value can not be represented as " + format + " digit hex");
        }
        String returnStr = new String();
        for (int i = 0; i < (format - binStrlength); i++) {
            returnStr = returnStr + '0';
        }
        returnStr = returnStr + binStr;
        return returnStr;
    }
    
    /**
     *  convert integer value to nearest power of 2 number greater than this value
     *  @param xInt integer value to be convert
     *  @return  the nearest power of 2 number greater than xInt
     */
    private int _greaterPowerOfTwo(int xInt) {
        int i = 0;
    	while ( Math.pow( 2.0, (double)i ) < xInt ) {
        	i++;
        }
    	return (int)Math.pow( 2.0, (double)i );
    }

    private int _log2(int xInt) {
        int i = 0;
    	while ( Math.pow( 2.0, (double)i ) < xInt ) {
        	i++;
        }
    	return i;
    }

    /**
     *  Description of the Method
     *
     * @param  fileName Description of the Parameter
     * @param  extension Description of the Parameter
     * @return  Description of the Return Value
     * @exception  FileNotFoundException Description of the Exception
     */
    private static PrintStream _openFile( String fileName, String extension )
            throws FileNotFoundException {

        PrintStream printStream = null;
        UserInterface ui = UserInterface.getInstance();
        String fullFileName = "";

	// Create the directory indicated by the '-o' option. Otherwise
        // select the orignal filename. (REFACTOR)
        if( ui.getOutputFileName() == "" ) {
            fullFileName =
                ui.getBasePath() + "/" +
                ui.getFileName() + "/" + fileName + "." + extension;
        } else {
            fullFileName =
                ui.getBasePath() + "/" +
                ui.getOutputFileName() + "/" + fileName + "." + extension;
        }

        System.out.println(" -- OPEN FILE: " + fullFileName);

        if( fileName.equals("") ) {
            printStream = new PrintStream( System.out );
        } else {
            OutputStream file = null;

            file = new FileOutputStream( fullFileName );
            printStream = new PrintStream( file );
        }

        return printStream;
    }
    
    ///////////////////////////////////////////////////////////////////
    ////                         private variables                  ///
    
    private Vector _fifoList  = new Vector();
    
    private int _zbtInterfaceFlag = 0;
    
    private int _numZbtCtrl = 0;
    
    private int _numZbtCtrlVisit = 0;
    
    private int _numMb = 0;
    
    private int _numHWNode = 0;
    
    private int _numUart = 0;
    
    private int _numUartVisit = 1;
    
    private int _numFinCtrl = 1;
    
    private int _numFinIP = 1;
    
    private int _numTimers = 0;
    
    private Mapping _mapping = null;
    
    private static UserInterface _ui = null;
}

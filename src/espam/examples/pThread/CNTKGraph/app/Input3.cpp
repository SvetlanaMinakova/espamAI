// File automatically generated by ESPAM

#include "Input3.h"
#include <stdlib.h>
#include <iostream>
#include "csdfNode.h"
#include "appMain.h"
#include "appFunc.h"
#include "fifo.h"
#include <cstddef>
#include "types.h"
#include <vector>
#include <string>
using namespace std;

Input3::Input3() : csdfNode() {
  //assign FIFO sizes
  OP0_fifo_size = 28;

  int_params["output_dims"] = output_dims;
  int_params["output_dim_0"] = output_dim_0;
  int_params["output_dim_1"] = output_dim_1;
}
Input3::~Input3() {}

void Input3::main(void *threadarg) {
  // create communication channel
  thread_info *thread_data;
  thread_data = (struct thread_info *) threadarg;
  fifo_buf* Input3_OP0_buf_ptr = thread_data->get_fifo_buf_by_src("Input3_OP0");
 
  for(int j=0; j<output_dim_1;j++){

	  for(int i=0; i<output_dim_0;i++){
		  output[i][j] = 1;

	  }

  }
 
  setaffinity(thread_data->core_id);
  // repetition parameters definition
  int q = 28;
  int phase_len = 28;
  int phase; 
 
  // while (1) {
    // loop over the repetitions number
    for (int rep = 0; rep < q ; rep ++) {
      phase = rep % phase_len;

      //reading

      //writing
      //max tokens port OP0
      int OP0_tokens = 28;
 
  //    cout<<"write Input3 "<<rep<<endl;

      // writeSWF_CPU to output
      writeSWF_CPU(Input3_OP0_buf_ptr->fifo, &output[0][0], OP0_tokens, Input3_OP0_buf_ptr->fifo_size);
    }// loop over the phases
  cout<<" Input3 finished! "<<endl;
  //} while (1)
} // main

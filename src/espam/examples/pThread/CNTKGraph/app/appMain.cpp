// File automatically generated by ESPAM

#include "Input3.h"
#include "Convolution28.h"
#include "Plus30.h"
#include "ReLU32.h"
#include "Pooling66.h"
#include "Convolution110.h"
#include "Plus112.h"
#include "ReLU114.h"
#include "Pooling160.h"
#include "Times212_reshape0.h"
#include "Times212.h"
#include "Plus214.h"
#include "Plus214_Output_0.h"
#include <stdlib.h>
#include <iostream>
#include <map>
#include <vector>
#include "csdfNode.h"
#include "appMain.h"
#include "appFunc.h"
#include "fifo.h"
#include <cstddef>
#include "types.h"
#include <thread>
using namespace std;

appMain::appMain() {}
appMain::~appMain() {}

// Main function
  void appMain::main()
    {
      // list of all available nodes
      std::map< std::string, csdfNode* > nodes = std::map< std::string,csdfNode* >();
      Input3 Input3_inst = Input3();
      nodes["Input3"] = &Input3_inst;
      Convolution28 Convolution28_inst = Convolution28();
      nodes["Convolution28"] = &Convolution28_inst;
      Plus30 Plus30_inst = Plus30();
      nodes["Plus30"] = &Plus30_inst;
      ReLU32 ReLU32_inst = ReLU32();
      nodes["ReLU32"] = &ReLU32_inst;
      Pooling66 Pooling66_inst = Pooling66();
      nodes["Pooling66"] = &Pooling66_inst;
      Convolution110 Convolution110_inst = Convolution110();
      nodes["Convolution110"] = &Convolution110_inst;
      Plus112 Plus112_inst = Plus112();
      nodes["Plus112"] = &Plus112_inst;
      ReLU114 ReLU114_inst = ReLU114();
      nodes["ReLU114"] = &ReLU114_inst;
      Pooling160 Pooling160_inst = Pooling160();
      nodes["Pooling160"] = &Pooling160_inst;
      Times212_reshape0 Times212_reshape0_inst = Times212_reshape0();
      nodes["Times212_reshape0"] = &Times212_reshape0_inst;
      Times212 Times212_inst = Times212();
      nodes["Times212"] = &Times212_inst;
      Plus214 Plus214_inst = Plus214();
      nodes["Plus214"] = &Plus214_inst;
      Plus214_Output_0 Plus214_Output_0_inst = Plus214_Output_0();
      nodes["Plus214_Output_0"] = &Plus214_Output_0_inst;

      /**
        Define schedule 
        Dummy schedule for LB-mode: layers in traverse order
        Dummy schedule for NB-mode: neurons of one layer can run in parallel
      */
      vector<std::string> schedule = vector<std::string>();

      schedule.push_back("Input3");
      schedule.push_back("Convolution28");
      schedule.push_back("Plus30");
      schedule.push_back("ReLU32");
      schedule.push_back("Pooling66");
      schedule.push_back("Convolution110");
      schedule.push_back("Plus112");
      schedule.push_back("ReLU114");
      schedule.push_back("Pooling160");
      schedule.push_back("Times212_reshape0");
      schedule.push_back("Times212");
      schedule.push_back("Plus214");
      schedule.push_back("Plus214_Output_0");

      // Prepare shared data and memory
 
      //Size of one token of FIFO in ints
      int token_len=sizeof(long)/sizeof(int)+(sizeof(long)%sizeof(int)+(sizeof(int)-1))/sizeof(int);
 
      //fifo channels definition and initialization. Fifo sizes are given in tokens.
      std::vector<fifo_buf> fifos = std::vector<fifo_buf>();
 
      // FIFO Input3_OP0-->Convolution28_IP0
      void *fifo_0=NULL;
      int fifo_size_0 = max(Input3_inst.OP0_fifo_size ,Convolution28_inst.IP0_fifo_size);
      fifo_0 = calloc(fifo_size_0 +2, sizeof(int));
      struct fifo_buf buf_0 = fifo_buf (fifo_0,fifo_size_0, "Input3_OP0" , "Convolution28_IP0");
      fifos.push_back(buf_0);
 
      // FIFO Convolution28_OP1-->Plus30_IP0
      void *fifo_2=NULL;
      int fifo_size_2 = max(Convolution28_inst.OP1_fifo_size ,Plus30_inst.IP0_fifo_size);
      fifo_2 = calloc(fifo_size_2 +2, sizeof(int));
      struct fifo_buf buf_2 = fifo_buf (fifo_2,fifo_size_2, "Convolution28_OP1" , "Plus30_IP0");
      fifos.push_back(buf_2);
 
      // FIFO Plus30_OP0-->ReLU32_IP0
      void *fifo_3=NULL;
      int fifo_size_3 = max(Plus30_inst.OP0_fifo_size ,ReLU32_inst.IP0_fifo_size);
      fifo_3 = calloc(fifo_size_3 +2, sizeof(int));
      struct fifo_buf buf_3 = fifo_buf (fifo_3,fifo_size_3, "Plus30_OP0" , "ReLU32_IP0");
      fifos.push_back(buf_3);
 
      // FIFO ReLU32_OP0-->Pooling66_IP0
      void *fifo_4=NULL;
      int fifo_size_4 = max(ReLU32_inst.OP0_fifo_size ,Pooling66_inst.IP0_fifo_size);
      fifo_4 = calloc(fifo_size_4 +2, sizeof(int));
      struct fifo_buf buf_4 = fifo_buf (fifo_4,fifo_size_4, "ReLU32_OP0" , "Pooling66_IP0");
      fifos.push_back(buf_4);
 
      // FIFO Pooling66_OP0-->Convolution110_IP0
      void *fifo_5=NULL;
      int fifo_size_5 = max(Pooling66_inst.OP0_fifo_size ,Convolution110_inst.IP0_fifo_size);
      fifo_5 = calloc(fifo_size_5 +2, sizeof(int));
      struct fifo_buf buf_5 = fifo_buf (fifo_5,fifo_size_5, "Pooling66_OP0" , "Convolution110_IP0");
      fifos.push_back(buf_5);
 
      // FIFO Convolution110_OP1-->Plus112_IP0
      void *fifo_7=NULL;
      int fifo_size_7 = max(Convolution110_inst.OP1_fifo_size ,Plus112_inst.IP0_fifo_size);
      fifo_7 = calloc(fifo_size_7 +2, sizeof(int));
      struct fifo_buf buf_7 = fifo_buf (fifo_7,fifo_size_7, "Convolution110_OP1" , "Plus112_IP0");
      fifos.push_back(buf_7);
 
      // FIFO Plus112_OP0-->ReLU114_IP0
      void *fifo_8=NULL;
      int fifo_size_8 = max(Plus112_inst.OP0_fifo_size ,ReLU114_inst.IP0_fifo_size);
      fifo_8 = calloc(fifo_size_8 +2, sizeof(int));
      struct fifo_buf buf_8 = fifo_buf (fifo_8,fifo_size_8, "Plus112_OP0" , "ReLU114_IP0");
      fifos.push_back(buf_8);
 
      // FIFO ReLU114_OP0-->Pooling160_IP0
      void *fifo_9=NULL;
      int fifo_size_9 = max(ReLU114_inst.OP0_fifo_size ,Pooling160_inst.IP0_fifo_size);
      fifo_9 = calloc(fifo_size_9 +2, sizeof(int));
      struct fifo_buf buf_9 = fifo_buf (fifo_9,fifo_size_9, "ReLU114_OP0" , "Pooling160_IP0");
      fifos.push_back(buf_9);
 
      // FIFO Pooling160_OP0-->Times212_reshape0_IP0
      void *fifo_10=NULL;
      int fifo_size_10 = max(Pooling160_inst.OP0_fifo_size ,Times212_reshape0_inst.IP0_fifo_size);
      fifo_10 = calloc(fifo_size_10 +2, sizeof(int));
      struct fifo_buf buf_10 = fifo_buf (fifo_10,fifo_size_10, "Pooling160_OP0" , "Times212_reshape0_IP0");
      fifos.push_back(buf_10);
 
      // FIFO Times212_reshape0_OP0-->Times212_IP0
      void *fifo_11=NULL;
      int fifo_size_11 = max(Times212_reshape0_inst.OP0_fifo_size ,Times212_inst.IP0_fifo_size);
      fifo_11 = calloc(fifo_size_11 +2, sizeof(int));
      struct fifo_buf buf_11 = fifo_buf (fifo_11,fifo_size_11, "Times212_reshape0_OP0" , "Times212_IP0");
      fifos.push_back(buf_11);
 
      // FIFO Times212_OP0-->Plus214_IP0
      void *fifo_12=NULL;
      int fifo_size_12 = max(Times212_inst.OP0_fifo_size ,Plus214_inst.IP0_fifo_size);
      fifo_12 = calloc(fifo_size_12 +2, sizeof(int));
      struct fifo_buf buf_12 = fifo_buf (fifo_12,fifo_size_12, "Times212_OP0" , "Plus214_IP0");
      fifos.push_back(buf_12);
 
      // FIFO Plus214_OP0-->Plus214_Output_0_IP0
      void *fifo_13=NULL;
      int fifo_size_13 = max(Plus214_inst.OP0_fifo_size ,Plus214_Output_0_inst.IP0_fifo_size);
      fifo_13 = calloc(fifo_size_13 +2, sizeof(int));
      struct fifo_buf buf_13 = fifo_buf (fifo_13,fifo_size_13, "Plus214_OP0" , "Plus214_Output_0_IP0");
      fifos.push_back(buf_13);
 
      // Preparation work for threads on CPU

      // Allocate memory for pthread_create() arguments
      const int num_threads = schedule.size();
      struct thread_info *thread_info = (struct thread_info*)(calloc(num_threads, sizeof(struct thread_info)));

      // Main threads

      //Input3 thread info
      thread_info[0].core_id = 0;
      fifo_buf* buf_ref_Input3_OP0 = appFunc::get_buf_by_src( "Input3_OP0", fifos);
      thread_info[0].add_fifo_buf_ref( buf_ref_Input3_OP0);

      //Convolution28 thread info
      thread_info[1].core_id = 1;
      fifo_buf* buf_ref_Convolution28_IP0 = appFunc::get_buf_by_dst( "Convolution28_IP0", fifos);
      thread_info[1].add_fifo_buf_ref( buf_ref_Convolution28_IP0);
      fifo_buf* buf_ref_Convolution28_OP1 = appFunc::get_buf_by_src( "Convolution28_OP1", fifos);
      thread_info[1].add_fifo_buf_ref( buf_ref_Convolution28_OP1);

      //Plus30 thread info
      thread_info[2].core_id = 2;
      fifo_buf* buf_ref_Plus30_IP0 = appFunc::get_buf_by_dst( "Plus30_IP0", fifos);
      thread_info[2].add_fifo_buf_ref( buf_ref_Plus30_IP0);
      fifo_buf* buf_ref_Plus30_OP0 = appFunc::get_buf_by_src( "Plus30_OP0", fifos);
      thread_info[2].add_fifo_buf_ref( buf_ref_Plus30_OP0);

      //ReLU32 thread info
      thread_info[3].core_id = 3;
      fifo_buf* buf_ref_ReLU32_IP0 = appFunc::get_buf_by_dst( "ReLU32_IP0", fifos);
      thread_info[3].add_fifo_buf_ref( buf_ref_ReLU32_IP0);
      fifo_buf* buf_ref_ReLU32_OP0 = appFunc::get_buf_by_src( "ReLU32_OP0", fifos);
      thread_info[3].add_fifo_buf_ref( buf_ref_ReLU32_OP0);

      //Pooling66 thread info
      thread_info[4].core_id = 4;
      fifo_buf* buf_ref_Pooling66_IP0 = appFunc::get_buf_by_dst( "Pooling66_IP0", fifos);
      thread_info[4].add_fifo_buf_ref( buf_ref_Pooling66_IP0);
      fifo_buf* buf_ref_Pooling66_OP0 = appFunc::get_buf_by_src( "Pooling66_OP0", fifos);
      thread_info[4].add_fifo_buf_ref( buf_ref_Pooling66_OP0);

      //Convolution110 thread info
      thread_info[5].core_id = 5;
      fifo_buf* buf_ref_Convolution110_IP0 = appFunc::get_buf_by_dst( "Convolution110_IP0", fifos);
      thread_info[5].add_fifo_buf_ref( buf_ref_Convolution110_IP0);
      fifo_buf* buf_ref_Convolution110_OP1 = appFunc::get_buf_by_src( "Convolution110_OP1", fifos);
      thread_info[5].add_fifo_buf_ref( buf_ref_Convolution110_OP1);

      //Plus112 thread info
      thread_info[6].core_id = 0;
      fifo_buf* buf_ref_Plus112_IP0 = appFunc::get_buf_by_dst( "Plus112_IP0", fifos);
      thread_info[6].add_fifo_buf_ref( buf_ref_Plus112_IP0);
      fifo_buf* buf_ref_Plus112_OP0 = appFunc::get_buf_by_src( "Plus112_OP0", fifos);
      thread_info[6].add_fifo_buf_ref( buf_ref_Plus112_OP0);

      //ReLU114 thread info
      thread_info[7].core_id = 1;
      fifo_buf* buf_ref_ReLU114_IP0 = appFunc::get_buf_by_dst( "ReLU114_IP0", fifos);
      thread_info[7].add_fifo_buf_ref( buf_ref_ReLU114_IP0);
      fifo_buf* buf_ref_ReLU114_OP0 = appFunc::get_buf_by_src( "ReLU114_OP0", fifos);
      thread_info[7].add_fifo_buf_ref( buf_ref_ReLU114_OP0);

      //Pooling160 thread info
      thread_info[8].core_id = 2;
      fifo_buf* buf_ref_Pooling160_IP0 = appFunc::get_buf_by_dst( "Pooling160_IP0", fifos);
      thread_info[8].add_fifo_buf_ref( buf_ref_Pooling160_IP0);
      fifo_buf* buf_ref_Pooling160_OP0 = appFunc::get_buf_by_src( "Pooling160_OP0", fifos);
      thread_info[8].add_fifo_buf_ref( buf_ref_Pooling160_OP0);

      //Times212_reshape0 thread info
      thread_info[9].core_id = 3;
      fifo_buf* buf_ref_Times212_reshape0_IP0 = appFunc::get_buf_by_dst( "Times212_reshape0_IP0", fifos);
      thread_info[9].add_fifo_buf_ref( buf_ref_Times212_reshape0_IP0);
      fifo_buf* buf_ref_Times212_reshape0_OP0 = appFunc::get_buf_by_src( "Times212_reshape0_OP0", fifos);
      thread_info[9].add_fifo_buf_ref( buf_ref_Times212_reshape0_OP0);

      //Times212 thread info
      thread_info[10].core_id = 4;
      fifo_buf* buf_ref_Times212_IP0 = appFunc::get_buf_by_dst( "Times212_IP0", fifos);
      thread_info[10].add_fifo_buf_ref( buf_ref_Times212_IP0);
      fifo_buf* buf_ref_Times212_OP0 = appFunc::get_buf_by_src( "Times212_OP0", fifos);
      thread_info[10].add_fifo_buf_ref( buf_ref_Times212_OP0);

      //Plus214 thread info
      thread_info[11].core_id = 5;
      fifo_buf* buf_ref_Plus214_IP0 = appFunc::get_buf_by_dst( "Plus214_IP0", fifos);
      thread_info[11].add_fifo_buf_ref( buf_ref_Plus214_IP0);
      fifo_buf* buf_ref_Plus214_OP0 = appFunc::get_buf_by_src( "Plus214_OP0", fifos);
      thread_info[11].add_fifo_buf_ref( buf_ref_Plus214_OP0);

      //Plus214_Output_0 thread info
      thread_info[12].core_id = 6;
      fifo_buf* buf_ref_Plus214_Output_0_IP0 = appFunc::get_buf_by_dst( "Plus214_Output_0_IP0", fifos);
      thread_info[12].add_fifo_buf_ref( buf_ref_Plus214_Output_0_IP0);

      // Create and run thread_Input3
      std::thread thread_Input3(&Input3::main, &Input3_inst, &thread_info[0]);
      cout<<"Joined with thread thread_Input3"<<endl;
    //  thread_Input3.join();

      // Create and run thread_Convolution28
      std::thread thread_Convolution28(&Convolution28::main, &Convolution28_inst, &thread_info[1]);
      cout<<"Joined with thread thread_Convolution28"<<endl;
    //  thread_Input3.join();

     // thread_Convolution28.join();

      //Create and run thread_Plus30
      std::thread thread_Plus30(&Plus30::main, &Plus30_inst, &thread_info[2]);
      cout<<"Joined with thread thread_Plus30"<<endl;
     // thread_Plus30.join();

     // Create and run thread_ReLU32
      std::thread thread_ReLU32(&ReLU32::main, &ReLU32_inst, &thread_info[3]);
      cout<<"Joined with thread thread_ReLU32"<<endl;
     // thread_ReLU32.join();


      //Create and run thread_Pooling66
      std::thread thread_Pooling66(&Pooling66::main, &Pooling66_inst, &thread_info[4]);
      cout<<"Joined with thread thread_Pooling66"<<endl;
     // thread_Pooling66.join();

      //Create and run thread_Convolution110
      std::thread thread_Convolution110(&Convolution110::main, &Convolution110_inst, &thread_info[5]);
      cout<<"Joined with thread thread_Convolution110"<<endl;
      //thread_Convolution110.join();

      //Create and run thread_Plus112
      std::thread thread_Plus112(&Plus112::main, &Plus112_inst, &thread_info[6]);
      cout<<"Joined with thread thread_Plus112"<<endl;
      //thread_Plus112.join();

      // Create and run thread_ReLU114
      std::thread thread_ReLU114(&ReLU114::main, &ReLU114_inst, &thread_info[7]);
      cout<<"Joined with thread thread_ReLU114"<<endl;
      //thread_ReLU114.join();

      //Create and run thread_Pooling160
      std::thread thread_Pooling160(&Pooling160::main, &Pooling160_inst, &thread_info[8]);
      cout<<"Joined with thread thread_Pooling160"<<endl;
      //thread_Pooling160.join();

      // Create and run thread_Times212_reshape0
      std::thread thread_Times212_reshape0(&Times212_reshape0::main, &Times212_reshape0_inst, &thread_info[9]);
      cout<<"Joined with thread thread_Times212_reshape0"<<endl;
      //thread_Times212_reshape0.join();

     // Create and run thread_Times212
      std::thread thread_Times212(&Times212::main, &Times212_inst, &thread_info[10]);
      cout<<"Joined with thread thread_Times212"<<endl;
      //thread_Times212.join();

      // Create and run thread_Plus214
      std::thread thread_Plus214(&Plus214::main, &Plus214_inst, &thread_info[11]);
      cout<<"Joined with thread thread_Plus214"<<endl;
      //thread_Plus214.join();

      // Create and run thread_Plus214_Output_0
      std::thread thread_Plus214_Output_0(&Plus214_Output_0::main, &Plus214_Output_0_inst, &thread_info[12]);
      cout<<"Joined with thread thread_Plus214_Output_0"<<endl;
      //thread_Plus214_Output_0.join();

      // Join threads that should be awaited


      thread_Input3.join();
      thread_Convolution28.join();
      thread_Plus30.join();
      thread_ReLU32.join();
      thread_Pooling66.join();
      thread_Convolution110.join();

      thread_Plus112.join();
      thread_ReLU114.join();
      thread_Pooling160.join();

      thread_Times212_reshape0.join();

      thread_Times212.join();

      thread_Plus214.join();
      thread_Plus214_Output_0.join();

      cout<<"Generated program is finished!"<<endl;
    }


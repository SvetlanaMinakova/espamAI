// File automatically generated by ESPAM

#include "Plus214_Output_0.h"
#include <stdlib.h>
#include <iostream>
#include "csdfNode.h"
#include "appMain.h"
#include "appFunc.h"
#include "fifo.h"
#include <cstddef>
#include "types.h"
#include <vector>
#include <string>
using namespace std;

Plus214_Output_0::Plus214_Output_0() : csdfNode() {
  //assign FIFO sizes
  IP0_fifo_size = 10;

  int_params["input_dims"] = input_dims;
  int_params["input_dim_0"] = input_dim_0;
}
Plus214_Output_0::~Plus214_Output_0() {}

void Plus214_Output_0::main(void *threadarg) {
  // create communication channel
  thread_info *thread_data;
  thread_data = (struct thread_info *) threadarg;
  fifo_buf* Plus214_Output_0_IP0_buf_ptr = thread_data->get_fifo_buf_by_dst("Plus214_Output_0_IP0");
 
 
  setaffinity(thread_data->core_id);
  // repetition parameters definition
  int q = 1;
  int phase_len = 1;
  int phase; 
 
  // while (1) {
    // loop over the repetitions number
    for (int rep = 0; rep < q ; rep ++) {
      phase = rep % phase_len;

      //reading
      //max tokens port IP0
      int IP0_tokens = 10;
 
      // readSWF_CPU to input
      readSWF_CPU(Plus214_Output_0_IP0_buf_ptr->fifo, &input[0], IP0_tokens, Plus214_Output_0_IP0_buf_ptr->fifo_size);

      //writing
    }// loop over the phases
  cout<<" Plus214_Output_0 finished! "<<endl;
  //} while (1)
} // main

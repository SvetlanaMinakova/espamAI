// File automatically generated by ESPAM

#include "input.h"
#include <stdlib.h>
#include <iostream>
#include "csdfNode.h"
#include "appMain.h"
#include "appFunc.h"
#include "fifo.h"
#include <cstddef>
#include "types.h"
#include <vector>
#include <string>
using namespace std;

input::input() : csdfNode() {
  //assign FIFO sizes
  OP0_fifo_size = 1024;

  int_params["output_dims"] = output_dims;
  int_params["output_dim_0"] = output_dim_0;
  int_params["output_dim_1"] = output_dim_1;
// fill data container with dummy data 
  for (int j=0;j< data_dim_0;j++) { 
    for (int i=0;i< data_dim_1;i++) { 
      data[j][i]=j;
    } 
  } 
}
input::~input() {}

void input::main(void *threadarg) {
  // create communication channel
  thread_info *thread_data;
  thread_data = (struct thread_info *) threadarg;
  fifo_buf* input_OP0_buf_ptr = thread_data->get_fifo_buf_by_src("input_OP0");
 
 
  setaffinity(thread_data->core_id);
  // repetition parameters definition
  int q = 32;
  int phase_len = 32;
  int phase; 
 
  // while (1) {
    // loop over the repetitions number
    for (int rep = 0; rep < q ; rep ++) {
      phase = rep % phase_len;

      //reading
      //execution: produce next data line
      appFunc::cpy_2D_data_line(data_dim_1,&data[0][0],&output[0][0],rep);

      //writing
      //max tokens port OP0
      int OP0_tokens = 32;
 
      // writeSWF_CPU to output
      if ( OP0_tokens > 0 )
        writeSWF_CPU(input_OP0_buf_ptr->fifo, &output[0][0], OP0_tokens, input_OP0_buf_ptr->fifo_size);
    }// loop over the phases
  cout<<" input finished! "<<endl;
  //} while (1)
} // main

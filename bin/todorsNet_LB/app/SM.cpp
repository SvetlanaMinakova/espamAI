// File automatically generated by ESPAM

#include "SM.h"
#include <stdlib.h>
#include <iostream>
#include "csdfNode.h"
#include "appMain.h"
#include "appFunc.h"
#include "fifo.h"
#include <cstddef>
#include "types.h"
#include <vector>
#include <string>
using namespace std;

SM::SM() : csdfNode() {
  //assign FIFO sizes
  IP0_fifo_size = 48;
  OP0_fifo_size = 2;

  int_params["input_dims"] = input_dims;
  int_params["input_dim_0"] = input_dim_0;
  int_params["output_dims"] = output_dims;
  int_params["output_dim_0"] = output_dim_0;

// fill weights with dummy values 
  for (int w0=0;w0< weights_dim_0;w0++) { 
    for (int w1=0;w1< weights_dim_1;w1++) { 
      weights[w0][w1] = 1; 
      }
    }
}
SM::~SM() {}

void SM::main(void *threadarg) {
  // create communication channel
  thread_info *thread_data;
  thread_data = (struct thread_info *) threadarg;
  fifo_buf* SM_IP0_buf_ptr = thread_data->get_fifo_buf_by_dst("SM_IP0");
 
  fifo_buf* SM_OP0_buf_ptr = thread_data->get_fifo_buf_by_src("SM_OP0");
 
 
  setaffinity(thread_data->core_id);
  // repetition parameters definition
  int q = 1;
  int phase_len = 1;
  int phase; 
 
  // while (1) {
    // loop over the repetitions number
    for (int rep = 0; rep < q ; rep ++) {
      phase = rep % phase_len;

      //reading
      //max tokens port IP0
      int IP0_tokens = 48;
 
      // readSWF_CPU to input
      if ( IP0_tokens > 0 )
        readSWF_CPU(SM_IP0_buf_ptr->fifo, &input[0], IP0_tokens, SM_IP0_buf_ptr->fifo_size);

      //execution
      appFunc::execute(std::string("DENSEBLOCK_SOFTMAX(1_48,48_2)"),&input[0], &weights[0][0], &output[0], &int_params);

      //writing
      //max tokens port OP0
      int OP0_tokens = 2;
 
      // writeSWF_CPU to output
      if ( OP0_tokens > 0 )
        writeSWF_CPU(SM_OP0_buf_ptr->fifo, &output[0], OP0_tokens, SM_OP0_buf_ptr->fifo_size);
    }// loop over the phases
  cout<<" SM finished! "<<endl;
  //} while (1)
} // main

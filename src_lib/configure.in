dnl Autoconfigure for ESPAM_LIBs
AC_INIT(vars.mk.in)

if test $prefix = "NONE"; then
	prefix=`readlink -f ..`
	AC_MSG_WARN([No prefix is given, Will assume that libraries will be installed in directory "$prefix". Use "--prefix=path" to change this path])
else
	AC_MSG_WARN([Libraries will be installed in directory '$prefix'])
fi

if test ! -d  $prefix; then
	AC_MSG_WARN([Prefix path doesn't exist. Please check path supplied with  "--prefix=path" option])
fi

dnl Check the ESPAM STUFF
AC_CHECKING(" -------- ESPAM Stuff --------- ")
#--------------------------------------------------------------------
#	Checking for ESPAM instalation
#--------------------------------------------------------------------

AC_ARG_WITH(espam, [  --with-espam=DIR         Location of ESPAM instalation],
    ESPAM=$withval, ESPAM=`readlink -f ..`)

if test $ESPAM = "NONE"; then
    AC_MSG_WARN([No Espam path  is given. The default path '$prefix' will be used. Use option "--with-espam=path" to change this path])
    AC_MSG_CHECKING([for espam jar file])
    if test -x "$prefix/lib/espam.jar"; then
        ESPAM_SRC=$prefix/lib/espam.jar
        AC_MSG_RESULT(['$ESPAM_SRC'])
    else
        AC_MSG_ERROR([Failed to find Espam jar file in '$prefix/lib/']);
    fi
else
   if test -d "$ESPAM"; then
       AC_MSG_RESULT([Using ESPAM at '$ESPAM'])
       AC_MSG_CHECKING([for ESPAM source path])
       if test -d "$ESPAM/src"; then
           ESPAM_SRC=$ESPAM/src
           AC_MSG_RESULT(['$ESPAM_SRC'])
       else
           AC_MSG_ERROR([Failed to find source path in '$ESPAM']);
       fi
   else
       AC_MSG_ERROR([ESPAM path doesn't exist. Please check path supplied with  "--with-espam=path" option])
   fi
fi

dnl make a canonical system definition
AC_CANONICAL_SYSTEM 

AC_CHECKING(" -------- C Stuff --------- ")
dnl Check for the C compiler etc.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_LN_S


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_STDC

dnl Checks for libraries.
dnl We use shared libraries when possible. In that case we
dnl use the shared_lib function, otherwise the library
dnl function from fucntions_default.mk. In case of the
dnl shared libraries we fill in specifics for the platforms

case "$target" in
    *hpux*)  
	LD="ld"
	SHEXT="sl" 
	OSEXT="hpux"	
	TCLFLAGS="-native"
	EXEC_SUFFIX=	
        SHAREDLIB_FLAG="-Wl,-B,immediate,-B,nonfatal,-B,verbose";     
        LDPATH="LD_LIBRARY_PATH";
        LIBTYPE="library" ;;
    i*-*-linux-gnu)  
	LD="gcc"
	SHEXT="so" ; 
	OSEXT="linux"
	TCLFLAGS=""
	EXEC_SUFFIX=
	SHAREDLIB_FLAG="-shared";     
        LDPATH="LD_LIBRARY_PATH";   
        LIBTYPE="library" ;;
    x*-*-linux-gnu)  
	LD="gcc"
	SHEXT="so" ; 
	OSEXT="linux"
	TCLFLAGS=""
	EXEC_SUFFIX=
	SHAREDLIB_FLAG="-shared";     
        LDPATH="LD_LIBRARY_PATH";   
        LIBTYPE="library" ;;
    *-sun-solaris*)  
	LD="ld"
	SHEXT="so" 
        OSEXT="solaris"
	TCLFLAGS="-native"
	EXEC_SUFFIX=
        SHAREDLIB_FLAG="-G"
        LDPATH="LD_LIBRARY_PATH";
	LIBTYPE="library" ;;
    i*-pc-cygwin)   
	LD="ld"
	SHEXT="dll"
        OSEXT="win32"
	TCLFLAGS=""
        SHAREDLIB_FLAG=""
	EXEC_SUFFIX=".exe"	
        LDPATH="PATH";
	LIBTYPE="dll" ;;
    *)  AC_MSG_ERROR([ARCH "$target" is not supported]) ;;
esac


dnl Check where the GMP library is on the system
AC_ARG_WITH(gmp, [  --with-gmp=DIR Location of the GMP library],GMP_DIR=$withval,GMP_DIR=/usr)

dnl Check where the PolyLib is on the system
AC_ARG_WITH(polylib, [  --with-polylib=DIR Location of the PolyLib Distribution],POLYLIB_DIR=$withval,POLYLIB_DIR=/usr)

dnl See if the only goal is to create a 32 bit library
AC_ARG_ENABLE(32bit,[ --enable-32bit=Enable that only a 32 bit polylib library should be used, otherwise 64 bit library is assumed],twbit=no,twbit=yes)
dnl if enable option is not selected, default to make 64/32 release
dnl else follow the result of the selection taken by user
if test "$twbit" = "yes"; then
	enable_32bit=no
fi
	
AC_MSG_CHECKING("The polylib library used: ")

dnl Check if GMP is present, to make 64/32 release
if test "$enable_32bit" = "no"; then
	BITS=64
else
	BITS=32
fi
AC_MSG_RESULT($BITS)

AC_CHECKING("for Polylib Distribution")
if test ! -d "$POLYLIB_DIR"; then
	AC_MSG_ERROR([Directory given for PolyLib Distribution is not a directory
use --with-polylib to locate the PolyLib Distribution])
fi

dnl The location of the polylib distribution
   POLYLIB_INC=$POLYLIB_DIR/include
   POLYLIB_LIB=$POLYLIB_DIR/lib

SAVE_CPPFLAGS=$CPPFLAGS
SAVE_LDFLAGS=$LDFLAGS
CPPFLAGS="-I$POLYLIB_INC $CPPFLAGS"
LDFLAGS="-L$POLYLIB_LIB $LDFLAGS"

dnl Check if polylib include files can be found and
dnl check if the polylib library (static or shared) can be found
AC_CHECK_HEADER(polylib/polylib${BITS}.h,
    [AC_CHECK_LIB(polylib${BITS}, LexSmaller, [true], 
	[AC_MSG_ERROR([PolyLib library not found or too old])])],
    [AC_MSG_ERROR([Polylib header file not found])])

POLYLIB_LIBS="-L${POLYLIB_LIB} -lpolylib${BITS}"
EXTRA_DEFINE="-DPOLYLIB511";

CPPFLAGS=$SAVE_CPPFLAGS
LDFLAGS=$SAVE_LDFLAGS

# Try to build a .so by linking in libpolylib.a
# This fails if libpolylib.a was compiled without -fPIC
AC_MSG_CHECKING(whether libpolylib can be used for shared objects)
if cat <<_END_ | gcc -x c - -shared -fPIC -o /dev/null -I${POLYLIB_INC} -L${POLYLIB_LIB} -Wl,-Bstatic -lpolylib${BITS} -Wl,-Bdynamic 2>/dev/null;
#include "polylib/polylib${BITS}.h"
void testfn() {
  LexSmaller();
}
_END_
then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(failed)
  AC_MSG_ERROR(Could not link libpolylib into a shared object. Please configure polylib using --with-pic)
fi


dnl Check, when making 64 bit version, if GMP is present
dnl The location of the gmp distribution
GMP_INC=$GMP_DIR/include
GMP_LIB=$GMP_DIR/lib

if test "$BITS" = 64; then
	AC_CHECK_LIB(gmp,main,gmplib=yes,gmplib=no)
	if test "$gmplib" = no; then
		AC_MSG_CHECKING("The gmp library location")
		if test -f "$GMP_LIB/libgmp.a"; then
			AC_MSG_RESULT("ok")
			GMP_LIBS="-L${GMP_LIB} -lgmp"
			#EXTRA_LIBS="$EXTRA_LIBS -L$GMP_LIB -lgmp"
		else
			AC_MSG_WARN(['${GMP_LIB}' does not contain libgmp.a])
		fi
	else
		GMP_LIBS="-L${GMP_LIB} -lgmp"
		#EXTRA_LIBS="$EXTRA_LIBS -L$GMP_LIB -lgmp"
	fi
fi


dnl set a define used in polylib.c
# echo $BITS
if test "$BITS" = 64; then
	# echo "BITS DEFINED"
	BITDEFS="-DBIT64"
fi

dnl Check the JAVA STUFF NEXT
AC_CHECKING(" -------- JAVA Stuff --------- ")
#--------------------------------------------------------------------
#	See if there was a command-line option for where Java is;  if
#	not, check to see if the JAVA_HOME environment variable is set;
#       if it is not, look for javac on the path.
#--------------------------------------------------------------------
AC_PATH_PROG(JAVAC,javac)
AC_ARG_WITH(java, [  --with-java=DIR         Location of JDK installation],
    JAVA_HOME=$withval, JAVA_HOME=`readlink -f $JAVAC | sed "s:/bin/javac::"`)
if test -d "$JAVA_HOME"; then
    AC_MSG_RESULT([Using Java installation at '$JAVA_HOME'])
else
    AC_MSG_ERROR([Java installation not found, please specify --with-java])
fi
JAVA=$JAVA_HOME/bin/java
JAVAC=$JAVA_HOME/bin/javac
JAVAH=$JAVA_HOME/bin/javah

#--------------------------------------------------------------------
#	Figure out which separator to use for CLASSPATH
#	So much for write once, run everywhere.
#       Find NT4 and Windows 2000 (CYGWIN_NT-4.0 and
#       CYGWIN_NT-5.0 respectively)
#--------------------------------------------------------------------
AC_MSG_CHECKING([for the proper CLASSPATH separator])

case "`uname -s`" in
    CYGWIN_NT-*) CLASSPATHSEPARATOR=";";;
    *) CLASSPATHSEPARATOR=":";;
esac
AC_MSG_RESULT(['$CLASSPATHSEPARATOR'])


dnl fix to get configure work smoother on CYGWIN systems
case "`uname -s`" in	
	# On a CYGWIN system, the path for the CLASSPATH and PATH
	# needs to be different to work correctly. The classpath
	# needs to start from the windows root (e.g. "c:/"), while the
	# path used to load an DLL should have as root the rootof
	# cyginw (e.g. /home).
    CYGWIN_NT-*) 
	CYGWINPREFIX=`echo $prefix | sed "s/.cygwin/g/" | sed "s/://" | sed "s/.g//"`
        AC_MSG_RESULT([Cygwin adjusted prefix for loading DLL:'$CYGWINPREFIX'])		
	LIBPATH=$CYGWINPREFIX/lib$CLASSPATHSEPARATOR$CYGWINPREFIX/../mp/lib;; #On Win/NT statically linked
    *) LIBPATH=$prefix/lib$CLASSPATHSEPARATOR$POLYLIB_LIB$CLASSPATHSEPARATOR$GMP_LIB$CLASSPATHSEPARATOR$prefix/../mp/lib;; #On LINUX/UNIX dynamically linked
esac

AC_MSG_CHECKING([for library path])
AC_MSG_RESULT(['$LIBPATH'])

# Keep these substitutions alphabetical, with a description

# Separator in CLASSPATH,  For Unix, this should be :, for Cygwin use ;
AC_SUBST(CLASSPATHSEPARATOR)

# Location of ESPAM sources
AC_SUBST(ESPAM_SRC)

# Arguments to pass to javac.  Usually something like '-g -depend'
AC_SUBST(JDEPENDFLAG)

# JDK Version determined by running confTest.class and getting java.version
AC_SUBST(JVERSION)

# Location of the JDK
AC_SUBST(JAVA_HOME)

AC_SUBST(EXTRA_DEFINE)


AC_SUBST(LD)
AC_SUBST(SHAREDLIB_FLAG)
AC_SUBST(LDPATH)

AC_SUBST(LIBTYPE)

AC_SUBST(SHEXT)
AC_SUBST(OSEXT)
AC_SUBST(TCLFLAGS)
AC_SUBST(EXTRA_LIBS)
AC_SUBST(BITDEFS)

# Location of the PolyLib Distribution
AC_SUBST(POLYLIB_INC)
AC_SUBST(POLYLIB_LIB)
AC_SUBST(GMP_LIB)
AC_SUBST(GMP_INC)

# Location of the GMP library
AC_SUBST(LIBPATH)

AC_SUBST(BITS)
AC_SUBST(EXEC_SUFFIX)

# Files we substitute in
AC_OUTPUT(vars.mk)


